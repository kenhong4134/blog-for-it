[{"categories":null,"content":"[TOC] 2022/10/15 完賽，前面有些 AWS 服務的內容沒有補完 學習多個雲，真的有需要嗎? 實際情況是，有些公司強調服務的高可用性時，不會允許某一朵雲的服務發生狀況。可能會用備用機房或是把服務導向另外一朵還存活的公有雲，避免公司的服務中斷。 每間公有雲的服務也很不一樣，像 AWS 的 S3 對應到 Azure 的 Storage 服務。而相比於 AWS 的 S3， Azure 的 Storage 就非常的多樣，也有 API 儲存 NoSQL 的資料。 過程中你也可以思考各個公有雲這樣做的架構究竟為什麼，甚至針對同樣的解決方案 (例如 IoT、智慧醫療) 都會有共同的點或是不同的思維方式。 我認為架構師的任務，就是設計能夠符合公司 有能力維護的架構 並且能夠 減少日後維護成本 。 賽後心得 坦白說 30 天內能準備的東西有限，可能我一天就會有好幾篇內容，有些地方我沒有研究的透徹只能在前面掛個 (Not Finish) 真的很抱歉，因為我不希望這個服務的精隨我沒有消化完提供給大家，反而讓各位看得霧沙沙，我自已也霧煞煞的急就章草草了事。 這 30 天我學習到的東西真的只有大概，但是我不希望自己只學習個大概。 最大的心得是自己對於架構方面有更進一步的認識，甚至知道很多名詞跟現在解決某些情境的解決方案。 而且在學習過程中，有太多服務有新功能、新設定。 學習、常常使用雲服務，永遠都有新的技術跟架構可以體驗。 這個挑戰賽讓我養成了每天去嘗試新技術，這個習慣我養成了的話，一年我就變強 37 倍了！(不過我更希望薪資可以成長 37 倍…)。 每天花兩三個小時了解技術的用途，也不一定能消化吸收並且產出，我覺得這部分我自己也需要加強！ 每天能讀的量不一樣，就跟重訓一樣，我認為重點在於每天的累積，養成習慣比較重要。 大話 AWS 雲端架構 這本書真的寫得很好，如果有心研究雲端架構，真的可以買一本來讀看看，裡面用到很多實際的案例，透過哲學的方式，用現實生活中發生的狀況來舉例。例如: 工廠下單、按摩店、Pizza 店…..等。 我建議 一定要畫架構圖 、 一定要畫流程圖 、 一定要畫流程圖 畫架構圖是加速你對架構了解最快的捷徑，釐清資料流程與 AWS 服務彼此的關係相當重要。 再來就是文章品質、寫作格式與內容描述我覺得也需要更精煉，從業以來，我遇過兩個主管曾經對我說過… 專業的人不是說自己會什麼，而是能把自己會的東西用對方能理解的方式說出來，這才是「專業」 挑戰回顧 我列出這三十天的實際執行後，我認為有些成功的部份，下次可以繼續保持！ 跟有些我覺得沒那麼好、失敗可以改善的部分來分析自己的弱點。 ","date":"2022-10-15","objectID":"/blog-for-it/posts/day-30-%E8%B3%BD%E5%BE%8C%E5%BF%83%E5%BE%97/:0:0","tags":["14th鐵人賽","挑戰回顧"],"title":"Day 30 - 賽後心得","uri":"/blog-for-it/posts/day-30-%E8%B3%BD%E5%BE%8C%E5%BF%83%E5%BE%97/"},{"categories":null,"content":"成功的部份 保持每天輸出的習慣 已經持續 30 天了，已經度過困難的維持期了！繼續保持下去 設定好目標、內容框架 這次有明確的目標設定 30 天要呈現的內容框架在前面幾天就大致上訂好了 ","date":"2022-10-15","objectID":"/blog-for-it/posts/day-30-%E8%B3%BD%E5%BE%8C%E5%BF%83%E5%BE%97/:1:0","tags":["14th鐵人賽","挑戰回顧"],"title":"Day 30 - 賽後心得","uri":"/blog-for-it/posts/day-30-%E8%B3%BD%E5%BE%8C%E5%BF%83%E5%BE%97/"},{"categories":null,"content":"失敗，可以改善的部分 文章品質、寫作格式與內容描述需要更精煉 文章排版，文章排版的架構什麼時候應該用斜線、粗體、粗斜線下次一定要先定義好。這部分參考一下其他人怎麼寫的，我認為好閱讀的格式。 Hands-on 某些服務的實作我沒有很熟悉，只能瞭解這個服務大致上能做什麼。 高估自己的資訊吸收與產出的效率 每天產出的量不一樣，但是我先維持住每天至少花半個小時，每週至少 7 個小時投入技術的研究及產出 這部分真的有點高估了，原本預估我每天花 1 個小時來完成這些知識並且產出，但是發現執行下來至少得花 2 個小時以上，我覺得有幾種可能: 1. 真的不熟悉這個服務 2. 沒有相關實際運用 沒有相關的實際運用可能對於業界常用的架構我還不熟悉，之後可以慢慢去看其他行業的系統架構是怎麼去做，是否很穩定、可用性很高 是否能更有效率地去吸收資訊並提高產出呢？ 我之前在 PPA 有買瓦基的 化輸入為輸出 一直沒有認真上課…. 讓我上完之後實際執行裡面的內容期待我下次的鐵人賽吧！ 參考資料 【Day30】如何自我挑戰，完成鐵人賽？ ","date":"2022-10-15","objectID":"/blog-for-it/posts/day-30-%E8%B3%BD%E5%BE%8C%E5%BF%83%E5%BE%97/:2:0","tags":["14th鐵人賽","挑戰回顧"],"title":"Day 30 - 賽後心得","uri":"/blog-for-it/posts/day-30-%E8%B3%BD%E5%BE%8C%E5%BF%83%E5%BE%97/"},{"categories":null,"content":"[TOC] 前言 - 何為 DevOps? 這邊還是要說明一下 DevOps 究竟是什麼。 DevOps 為英文 Development (開發) 和 Operation (運營) 的縮寫組合。是一種企業文化，講求 IT 團隊、 IT 運營團隊 、 QA 團隊三者間的溝通，增加彼此合作的效率，達到軟體開發效率的提升及品質的保障。 然後整個 DevOps 從一開始 Plan-\u003eCode-\u003eBuild-\u003eTest-\u003eRelease-\u003eDeploy-\u003eOperate-\u003eMonitor…. 週而復始的下去形成一個循環。 其中要如何增加交付的效率以及準確性，最常見的 CI / CD 持續整合、持續佈署的工具就誕生了。 各家廠商都有做類似的工具，例如 Open Source 的 Jetkins、CircleCI、Github Action … 等。 微軟的 Azure 會搭配 Azure Devops Service 來當作 CI/CD 的工具。 在 AWS 就是使用 CodePipeline 來控制整個軟體的發佈流程。 CodePipeline 是一種全受管持續交付服務，可自動化發行管道，快速、可靠地提供應用程式和基礎設施的更新，可靠地交付功能更新。 CodePipeline 可根據發行模式在每次程式碼變更時自動建立、測試和部署發行程序的各個階段。 可以將 AWS CodePipeline 與 GitHub 等第三方服務或自訂外掛程式來來做整合。 也可以搭配 CloudFormation 去做基礎設備的建立，快速地建立相關的 AWS 服務。 以下是佈署容器化應用程式常見的流程圖: CodeCommit CodeCommit 是一種版本控制服務，讓您能在 AWS 雲端 私下存放和管理 Git 儲存庫。 你也可以使用 Amazon CodeGuru Reviewer 對 AWS CodeCommit 中的儲存庫提供分析與建議。 CodeBuild CodeBuild 是在雲端的全受管組建服務。CodeBuild 可編譯原始碼、執行單元測試，最終產生可部署的應用程式。 優點在於你不必佈署、管理、擴展自己的伺服器。它提供預先封裝的編譯環境，適用於常見的程式設計語言和編譯工具，例如 Apache Maven、Gradle 等等。 CodeDeploy CodeDeploy 也是全受管部署服務，可以自動將軟體部署到各種運算服務，包括 EC2 Instance、AWS Fargate、AWS Lambda 和現場部署伺服器。 發佈應用程式的新功能、避免在部署應用程式時停機、處理複雜的應用程式更新，減少手動操作可能造成的錯誤。 同時它不只可以在 CodePipeline 使用，也可以 GitHub、Jenkins 去做整合。 結論 這四個 AWS 的服務，彼此之間沒有相依性。其中 CodePipeline 的角色更傾向於 調度者 ，安排哪個環節應該用哪個服務。 用簡單的流程來解釋有以下三種重要的流程: ​ 取得原始碼 -\u003e 編譯(組建)和單元測試 -\u003e 發佈應用程式 取得原始碼 ​ 可以從 AWS CodeCommit、GitHub、Amazon ECR 或 Amazon S3 直接提取管道的原始程式碼。 編譯(組建)和單元測試 ​ 可以在 AWS CodeBuild 執行編譯(組建)及單元測試。 發佈應用程式 ​ 可以使用 AWS CodeDeploy、AWS Elastic Beanstalk、Amazon ECS 或 AWS Fargate 佈署變更。 我認為好的 CI/CD 的工具，應該是具有彈性的。從取得原始碼到編譯原始碼到發佈應用程式的各個環節應該都是要能抽換成其他工具或是服務。 版本控制不一定要使用 CodeCommit ，也可以使用 Github。 編譯應用程式不一定要用 CodeBuild ，我也可以使用 Jetkins 或是 Github Actions。 最後發佈應用程式我也不一定要用 CodeDeploy，我還是可以繼續使用 Jetkins 搭配 AWS CLI 來發佈應用程式。 參考資料 Wiki。DevOps 51CTO 博客。一文收录16张DevOps ”拍照神图” dynatrace。What is DevOps? Unpacking the purpose and importance of an IT cultural revolution AWS。AWS CodeDeploy ","date":"2022-10-13","objectID":"/blog-for-it/posts/day-28-aws-devops-%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88/:0:0","tags":["14th鐵人賽","DevOps","AWS","AWS CodePipeline","AWS CodeCommit","AWS CodeBuild","AWS CodeDeploy"],"title":"Day 28 - AWS Devops 解決方案","uri":"/blog-for-it/posts/day-28-aws-devops-%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88/"},{"categories":null,"content":"[TOC] 前言 你有一個很棒的 AWS 基礎設備架構，你花了一個禮拜設定在 AWS Console 建立並拉出這樣的架構，再花了一個月測試這樣的架構沒問題。 之後，在準備上正式環境的時候，發現一切的設定都要重新來過，再花一個禮拜設定，再花一個月測試，然後可能很不幸的，有些服務的設定已經忘記怎麼設定了，又得再花一個禮拜找原因。 這樣會不會太沒效率了！我們有沒有更有效率的方式來建立這些服務，以避免花這麼多時間呢? CloudFormation，就是可以解決我們的需求的服務！ CloudFormation CloudFormation 是一個可以幫助我們快速建立 AWS 資源的服務。採用 基礎架構程式碼 (IaC) 的敘述方式，描述一個 Template，來告訴 CloudFormation 你想建立的資源，例如: EC2 Instance、RDS Instance。 之後 CloudFormation 就會依照你的描述，幫你建立、配置這些資源，所以你不用到各個資 源頁面，去個別建立和設定。這個服務幫助了我們以下: 簡化基礎設備的管理 快速複製基礎設備到其他環境 追蹤基礎設備地的改變 ","date":"2022-10-12","objectID":"/blog-for-it/posts/day-27-cloudformation-opsworks-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-aws-%E6%9C%8D%E5%8B%99/:0:0","tags":["14th鐵人賽","AWS","AWS CloudFormation","AWS OpsWorks"],"title":"Day 27 - CloudFormation \u0026 OpsWorks 快速搭建 AWS 服務","uri":"/blog-for-it/posts/day-27-cloudformation-opsworks-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-aws-%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"核心元件 Template、Stack、Change Set CloudFormation 有以下幾個重要元件: Template 設定檔，也是 CloudFormation 的基礎 支援 JSON、YAML 檔格式 Stack 推疊，也就是使用到的 AWS 服務 Change Set 變更集，負責追蹤環境內變更的 AWS 資源以及新增刪除的 AWS 服務 我們會透過 Template 開啟 Stack，在使用 Template 的時候，可以觀測 Change Set，確認會影響到的服務後建立出 Stack。 ","date":"2022-10-12","objectID":"/blog-for-it/posts/day-27-cloudformation-opsworks-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-aws-%E6%9C%8D%E5%8B%99/:1:0","tags":["14th鐵人賽","AWS","AWS CloudFormation","AWS OpsWorks"],"title":"Day 27 - CloudFormation \u0026 OpsWorks 快速搭建 AWS 服務","uri":"/blog-for-it/posts/day-27-cloudformation-opsworks-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-aws-%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"DependsOn \u0026 WaitCondition 我們來說實際的使用情境: 首先需要先開 RDS，再來開 EC2 Instance，等待 EC2 Instance 裡面的應用程式完成後，再來啟用 ELB 上述的要求，主要有兩點: 先開哪個資源? 哪個資源要等待它? 開完之後誰要等待? DependsOn: 決定先後順序，在誰之後建立 WaitCondition: 等待前面完成，在尚未收到完成訊號前阻擋其他 AWS 服務建立資源 透過這兩個屬性來決定 AWS 服務之間的關聯性。 ","date":"2022-10-12","objectID":"/blog-for-it/posts/day-27-cloudformation-opsworks-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-aws-%E6%9C%8D%E5%8B%99/:2:0","tags":["14th鐵人賽","AWS","AWS CloudFormation","AWS OpsWorks"],"title":"Day 27 - CloudFormation \u0026 OpsWorks 快速搭建 AWS 服務","uri":"/blog-for-it/posts/day-27-cloudformation-opsworks-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-aws-%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"Stack \u0026 Template 使用 CloudFormation 時，會把相關的資源透過 Stack 來表達跟管理。一個 Template 可以有多個 Stack，可以透過刪除 Stack 刪除一系列的 AWS 資源。 以下的 Template 就會建立一個 Stack 並有兩個 AWS 資源。 AWSTemplateFormatVersion: \"2010-09-09\" Description: A sample template Resources: MyEC2Instance: Type: \"AWS::EC2::Instance\" Properties: ImageId: \"ami-0ff8a91507f77f867\" InstanceType: t2.micro KeyName: testkey BlockDeviceMappings: - DeviceName: /dev/sdm Ebs: VolumeType: io1 Iops: 200 DeleteOnTermination: false VolumeSize: 20 MyEIP: Type: AWS::EC2::EIP Properties: InstanceId: !Ref MyEC2Instance 這個 template 描述了一個 EC2 Instance 及 Elastic IP ","date":"2022-10-12","objectID":"/blog-for-it/posts/day-27-cloudformation-opsworks-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-aws-%E6%9C%8D%E5%8B%99/:3:0","tags":["14th鐵人賽","AWS","AWS CloudFormation","AWS OpsWorks"],"title":"Day 27 - CloudFormation \u0026 OpsWorks 快速搭建 AWS 服務","uri":"/blog-for-it/posts/day-27-cloudformation-opsworks-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-aws-%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"Template 結構 在 Template 主要會分為以下幾個區塊 Resources 要建立的 AWS 資源 Parameters 使用此 Template ，需要提供怎麼樣的參數 Mappings 設定區域或是其他條件相關的。例如: 歐美地區開的 EC2 Instane 的 AMI 用 ami0001；亞太地區開的 EC2 Instane 的 AMI 用 ami0002 Outputs 在 Stack 完成後產生輸出值。 可以在 Console 看到，或是在 CLI 下 aws cloudformation describe-stacks 使用情境 A / B 測試 避免功能改錯了或是新功能會必會被用戶買單而建立的測試 需要將一部分的流量導入舊系統，另一部份導入新系統，蒐集測試資料去做後續評估 需要快速搭建擁有新功能的新環境 快速搭建各種用途的環境 針對不同用途，可能會有 DEV、UAT、PROD 環境，這三個環境在沒有新功能的情況下最終基礎設備都會一模一樣 哪一天 UAT 可能要增加一個環境供客戶測試，或是 PROD 環境需要建置在另外一個客戶的 AWS 帳號上面。 CloudFormation Designer 我們可以透過視覺化的方式，把 AWS 服務彼此之間要建立的資源關聯起來。 而 Designer 也可以自動生成 Template ，可以選擇輸出 JSON 或是 YAML，並且可以切成不同的組成條件去顯示(畢竟整個 Template 下來其實很不好閱讀)。 以下就是 CloudFormation Designer 的設計畫面。 OpsWorks 採用 Chef 和 Puppet 的自動化操作，我們需要了解宜下 Chef 和 Puppet 是做什麼用途的，這兩個軟體可使用程式碼自動設定伺服器組態的自動化平台。 什麼意思呢? 也就是你為了新環境建立的 EC2 Instance，你需要更新、安裝新的套件，設定系統環境變數。這時候就輪到 OpsWorks 的幫忙了。 OpsWorks 支援以下三種: AWS Opsworks for Chef Automate AWS OpsWorks for Puppet Enterprise AWS OpsWorks Stacks 結論 在學習 AWS 的初學者，我認為 CloudFormation 還是有它存在的價值。你還是可以透過 CloudFormation 去確認你建立的 AWS 服務。 但是許多元件非常的不直覺，WaitCondition 需要搭配 WaitConditionHandle 才能達成，也沒有搭配自動完成的功能。 相較於 CloudFormation 我更喜歡 Terraform 這個軟體。因為我不會被綁死在 AWS 這朵公有雲上但是又能達成建立 AWS 資源的功能。 在 2019 年時，AWS 推出了全新的開發套件 AWS Cloud Development Kit (AWS CDK)，透過利用 AWS CDK 套件，開發者可以定義整個雲端基礎架構使用程式的方法，同時提升可讀性，並可撰寫測試程式來減少失誤的可能性，也可以達到快速複製的效果。 參考資料 Medium。Chi-Hsuan Huang。Terraform 自動化的基礎架構介紹 Medium。Chi-Hsuan Huang。使用 CloudFormation 快速部署 AWS 資源 AWS。什麼是 AWS CloudFormation？ 博客園。亚马逊云服务之CloudFormation iThome。Day 17 - 看一下自己寫的東西都去哪了 AWS。AWS::CloudFormation::WaitCondition AWS。AWS OpsWorks ","date":"2022-10-12","objectID":"/blog-for-it/posts/day-27-cloudformation-opsworks-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-aws-%E6%9C%8D%E5%8B%99/:3:1","tags":["14th鐵人賽","AWS","AWS CloudFormation","AWS OpsWorks"],"title":"Day 27 - CloudFormation \u0026 OpsWorks 快速搭建 AWS 服務","uri":"/blog-for-it/posts/day-27-cloudformation-opsworks-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-aws-%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"[TOC] 前言 當我們實作微服務，就會遇到一些問題: 參數怎麼共用 ? 儲存的參數是否夠安全 ? 是否有版本紀錄每次的異動? 當微服務架構把業務邏輯抽出來了，但是有些組態、參數我們還是希望能共用方便我們維護以及統一設定。 在 AWS 有幾個服務可以達成共用的參數儲存。 KMS (Key Management Service) KMS (Key Management Service)，金鑰管理服務，是 AWS 儲存憑證金鑰的服務。 基本上就是儲存各種對稱、非對稱金鑰的地方。能夠統一管理各種憑證。它可以跟很多 AWS 的服務去做整合，例如: EC2 Instance 登入的時候會用到的金鑰， S3 檔案加密會用到的金鑰，還有我們接下來會介紹的 AWS 服務: Parameter Store、Secret Manager。 Parameter Store 屬於 AWS Systems Manager (SSM) 的一項功能，擁有高可用性的服務，且可以放在 AWS 各個區域的可用區域裡面。 您可以存放各種參數，例如: 密碼、資料庫字串、Amazon Machine Image ID 、API Token 、授權碼或是 任何需要共用統一儲存的資料 。 存放的參數可以是 純文字或加密資料 ，建立的參數會有自己的 ARN，可以用在指令碼、命令、SSM 文件以及組態和自動化工作流程中參考 Systems Manager 參數。 當你修改的時候也有版本紀錄，可以追蹤參數的變化。 Parameter Store 也能與等下會介紹的 Secrets Manager 整合。 有些 AWS 服務已經支援 Parameter Store 的服務，用來擷取 Secrets Manager 的秘密。 Secret Manager 如果你的密碼 定時都會去更新、替換 的話，建議可以使用 Secret Manager 來達成。 當多個應用程式需要透過憑證來取得資料內容的時候，通常憑證會有過期的問題，當鑲嵌在應用程式的憑證過期時，應用程式就有可能會失敗。也因為有此風險，許多客戶選擇不要定期輪換憑證。 但是憑證存在的目的，在於要達成資安的需求，而要達成資安的需求其中一項就是要有 時效性 。 但是更換憑證又太麻煩容易出錯，那該怎麼辦 ? 這時候 Secret Manager 存在的價值就出現了! Secrets Manager 可讓您將程式碼中的憑證 (包括密碼)，改成透過 API 呼叫 Secrets Manager，以程式設計方法擷取秘密，用更輕鬆的方式管理、輪換和擷取秘密。 這有助於確保不讓某人研究應用程式的程式碼而盜用秘密，因為 秘密不再存在於程式碼中 。 也可以設定 Secrets Manager，根據指定的排程自動輪換秘密。用短期秘密取代長期秘密，進而大幅降低洩漏風險。 參考資料 AWS。AWS Secrets Manager 使用 AWS KMS 的方式。 AWS。AWS 服務使用 AWS KMS 的方式。 AWS。AWS Systems Manager Parameter Store。 AWS。什麼是 AWS Secrets Manager？ ","date":"2022-10-11","objectID":"/blog-for-it/posts/day-26-aws-%E9%87%91%E9%91%B0%E5%84%B2%E5%AD%98-%E5%85%B1%E7%94%A8%E5%8F%83%E6%95%B8%E5%84%B2%E5%AD%98/:0:0","tags":["14th鐵人賽","AWS","AWS KMS","AWS Parameter Store","AWS Secrets Manager"],"title":"Day 26 - AWS 金鑰儲存 \u0026 共用參數儲存","uri":"/blog-for-it/posts/day-26-aws-%E9%87%91%E9%91%B0%E5%84%B2%E5%AD%98-%E5%85%B1%E7%94%A8%E5%8F%83%E6%95%B8%E5%84%B2%E5%AD%98/"},{"categories":null,"content":"[TOC] 混和雲架構 我們先說說看混和雲的存在必要。 天下合久必分，分久必合。 全部的服務上公有雲，不就結束了? 但是實際情況是，有些資料真的不能上雲，也因為一些法規讓資料可能無法保存在國外。 再來是搬遷成本，企業累積 10 年以上的資訊系統要在一朝一夕全部上雲是不可能的。 混和雲具備彈性，讓你有需要的時候在來使用雲端資料，也可以跟本地伺服器現有的資料與服務做溝通。 這裡書上提到了，混和雲的三個階段: ​ 網路穩定 -\u003e 資料同步 -\u003e 應用程式同步 Multi-Site 解決方案 有沒有想過當流量來了，公有雲的應用程式跟各個服務都不會壞掉嗎? 我想這個答案應該沒有人能保證，如果服務失效造成的商業損失，第一是損失估計難以估計，第二是就算估算出來了跟公有雲打官司勞財傷民又浪費時間，還不一定能拿到賠償。 與其這樣公司不如也準備一個機房，除了讓公有雲壞掉的時候能不讓公司服務掛掉增加可用性，在平常的時候做分流分擔雲端的運算。 Multi-Site 會遇到的挑戰如下: 本地應用倒入雲端 資料同步傳輸 網路傳輸穩定與安全 這幾項 AWS 都有對應的服務可以解決。 ","date":"2022-10-09","objectID":"/blog-for-it/posts/day-24-%E6%B7%B7%E5%90%88%E9%9B%B2%E6%9E%B6%E6%A7%8B/:0:0","tags":["14th鐵人賽","系統架構","AWS","AWS Direct Connect","AWS Storage Gateway","AWS FSx","AWS VM Import/Export"],"title":"Day 24 - 混合雲架構","uri":"/blog-for-it/posts/day-24-%E6%B7%B7%E5%90%88%E9%9B%B2%E6%9E%B6%E6%A7%8B/"},{"categories":null,"content":"Direct Connect 首先需要確保 網路品質 有這幾種: 傳輸穩定、封包安全。AWS 與本地 ISP 廠商推出了 Direct Connect。 可以將本地機房與 ISP 業者拉一條專線，然後由 ISP 將此專線的流量直接上雲，其簡易的流程如下: 可以確保重要資料直接輸入 AWS 或是從 AWS 傳出，繞過 ISP 且同時避免網路壅塞。 ","date":"2022-10-09","objectID":"/blog-for-it/posts/day-24-%E6%B7%B7%E5%90%88%E9%9B%B2%E6%9E%B6%E6%A7%8B/:1:0","tags":["14th鐵人賽","系統架構","AWS","AWS Direct Connect","AWS Storage Gateway","AWS FSx","AWS VM Import/Export"],"title":"Day 24 - 混合雲架構","uri":"/blog-for-it/posts/day-24-%E6%B7%B7%E5%90%88%E9%9B%B2%E6%9E%B6%E6%A7%8B/"},{"categories":null,"content":"Storage Gateway 確保網路品質後，接下來就是確保 資料同步 。通常公司一定會有 NFS 系統，透過 Storage Gateway 可以在本地環境模擬一個 NFS，當資料存到這個模擬的 NFS 就會透過 Storage Gateway 同步資料到雲端。 有以下三種閘道: File Gateway 將檔案上傳至 S3。 Volume Gateway 將檔案自動上傳到 EBS 的 Volume 或 Snapshot。 Tape Gateway 將檔案自動上傳至 Glacier。 ","date":"2022-10-09","objectID":"/blog-for-it/posts/day-24-%E6%B7%B7%E5%90%88%E9%9B%B2%E6%9E%B6%E6%A7%8B/:2:0","tags":["14th鐵人賽","系統架構","AWS","AWS Direct Connect","AWS Storage Gateway","AWS FSx","AWS VM Import/Export"],"title":"Day 24 - 混合雲架構","uri":"/blog-for-it/posts/day-24-%E6%B7%B7%E5%90%88%E9%9B%B2%E6%9E%B6%E6%A7%8B/"},{"categories":null,"content":"FSx 通常公司都有已經現有的文件系統，Amazon FSx 讓您可以在四種廣泛使用的文件系統進行選擇： NetApp ONTAP OpenZFS Windows File Server Lustre。 通常基於您對給定文件系統的熟悉程度，或將文件系統的功能集、性能配置文件和數據管理功能與應用程式匹配。 若你的應用程式牽扯到一些特定文件系統的功能或函式庫，這時候你就應該使用 FSx ，可以保持應用程序的兼容性而不改變管理數據的方式。 ","date":"2022-10-09","objectID":"/blog-for-it/posts/day-24-%E6%B7%B7%E5%90%88%E9%9B%B2%E6%9E%B6%E6%A7%8B/:3:0","tags":["14th鐵人賽","系統架構","AWS","AWS Direct Connect","AWS Storage Gateway","AWS FSx","AWS VM Import/Export"],"title":"Day 24 - 混合雲架構","uri":"/blog-for-it/posts/day-24-%E6%B7%B7%E5%90%88%E9%9B%B2%E6%9E%B6%E6%A7%8B/"},{"categories":null,"content":"VM Import/Export 可以將本地機房跟 EC2 的 Instance 做交換或同步。 可以匯入 VMware ESX 或 Workstation、Microsoft Hyper-V 以及 Citrix Xen 虛擬化格式的 Windows 與 Linux VM。匯出可以使用 AWS CLI 作為工具來匯入到 AWS 雲端。 也可以將 EC2 執行個體匯出為 VMware ESX、Microsoft Hyper-V 或 Citrix Xen 格式。 AWS 混和雲架構圖 參考資料 AWS。FSx AWS。VM Import/Export ","date":"2022-10-09","objectID":"/blog-for-it/posts/day-24-%E6%B7%B7%E5%90%88%E9%9B%B2%E6%9E%B6%E6%A7%8B/:4:0","tags":["14th鐵人賽","系統架構","AWS","AWS Direct Connect","AWS Storage Gateway","AWS FSx","AWS VM Import/Export"],"title":"Day 24 - 混合雲架構","uri":"/blog-for-it/posts/day-24-%E6%B7%B7%E5%90%88%E9%9B%B2%E6%9E%B6%E6%A7%8B/"},{"categories":null,"content":"[TOC] SNS 其主要的使用場景在於通知，如寄簡訊、Email 通知、APP 推播給用戶。 更進一步你可以透過 SNS 發起一個 HTTP 的請求至指定的 URL。 幫助你集中化管理，也可以透過觸發的方式整合一些 AWS 服務，如 Lambda、SQS。 最常見的使用情境是在CloudWatch ，搭配 SNS，在達到警示閥值的時候傳送訊息。 用戶端的訊息傳送與協調、管理訂閱端點。 ","date":"2022-10-08","objectID":"/blog-for-it/posts/day-23-sns-%E6%94%B6%E5%8F%96%E8%A8%8A%E6%81%AF%E6%9C%8D%E5%8B%99/:0:0","tags":["14th鐵人賽","AWS","AWS SNS"],"title":"Day 23 - SNS 收取訊息服務","uri":"/blog-for-it/posts/day-23-sns-%E6%94%B6%E5%8F%96%E8%A8%8A%E6%81%AF%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"SNS 核心元件 SNS 採用常見的 Pub \u0026 Sub 系統架構，最重要的三個核心元件如下: Publisher 發佈者 Subscriber 訂閱者 Topic 主題 Topic 是訊息頻道的邏輯存取點，不論是 Publish 要發佈訊息或是 Subscriber 要訂閱訊息都需要確定 Topic 的內容為何才有辦法繼續下去處理。 ","date":"2022-10-08","objectID":"/blog-for-it/posts/day-23-sns-%E6%94%B6%E5%8F%96%E8%A8%8A%E6%81%AF%E6%9C%8D%E5%8B%99/:1:0","tags":["14th鐵人賽","AWS","AWS SNS"],"title":"Day 23 - SNS 收取訊息服務","uri":"/blog-for-it/posts/day-23-sns-%E6%94%B6%E5%8F%96%E8%A8%8A%E6%81%AF%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"與 SQS 結合打造消息重用系統 SNS 蠻常搭配 SQS 做出一個消息可以重複使用的系統。如果收到一個訊息，同時有不同的系統需要接收做對應的處理，那應該怎麼做? 我們舉例來說，假設銀行收到一個警示訊息，需要將某個可疑的用戶凍結，這時候可能有幾種系統需要做對應的處理: 銀行帳戶管理系統: 將警示帳戶的帳戶凍結 客服系統: 通知被凍結的帳戶擁有人 這時候我們可以在 SNS 發出一個 Topic 的時候切出三條 SQS 的 Queue 去接收，每個 Queue 後面可以各自接不同的系統。 這也是分散式架構的優點，有些功能為了開發效率與系統的安全及可用性，會另外切割出來，一旦獨立的切割出來，也不一定要侷限於某種程式語言。 住要要做 雙向綁定，在 SNS 建立 SQS 的 訂閱以外，在 SQS 頁面也要允許 SNS ","date":"2022-10-08","objectID":"/blog-for-it/posts/day-23-sns-%E6%94%B6%E5%8F%96%E8%A8%8A%E6%81%AF%E6%9C%8D%E5%8B%99/:2:0","tags":["14th鐵人賽","AWS","AWS SNS"],"title":"Day 23 - SNS 收取訊息服務","uri":"/blog-for-it/posts/day-23-sns-%E6%94%B6%E5%8F%96%E8%A8%8A%E6%81%AF%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"[TOC] 資安架構 為什麼資安這麼重要? 因為駭客很簡單，哪邊有利可圖就往哪裡駭！ 尤其是對外服務的應用程式，如果又牽扯到一些金流，那更可能遭受到駭客的攻擊。 建議每年可以至 OWASP ( Open Web Application Security Project )，開放網路軟體安全計畫查看每年的 Top10 的資安問題。 以下為 AWS 為了資安所做出來的服務。 ","date":"2022-10-07","objectID":"/blog-for-it/posts/day-22-%E8%B3%87%E5%AE%89%E6%9E%B6%E6%A7%8B/:0:0","tags":["14th鐵人賽","AWS","AWS Shield","AWS WAF","AWS Firewall Manager"],"title":"Day 22 - 資安架構","uri":"/blog-for-it/posts/day-22-%E8%B3%87%E5%AE%89%E6%9E%B6%E6%A7%8B/"},{"categories":null,"content":"Shield Shield 是一種可保護 AWS 上執行的應用程式不受 DDoS 攻擊。 DDoS 針對 Layer 3 網路層以及 Layer 4 傳輸層做攻擊 AWS Shield 有兩種方案 – Standard 與 Advanced。 Standard 無須額外付費，所有的 AWS 資源都自動具有該功能。 舉例來說，我們對外的 EC2、ELB、CloudFront、Global Accelerator 和 Amazon Route 53 。 預設已經具備 Standard 的防護了。 Advanced ，則是提供更高水準的防護，擁有以下特性: 攻擊可見性 DDoS 攻擊的偵測與防護功能 查看 CloudWatch 指標與攻擊診斷，以便清楚掌握所有 DDoS 事件。 整合 Web 應用程式防火牆 可自定義 AWS WAF 規則防範 Layer 7 應用層的攻擊 AWS Shield 應變團隊 (SRT) 全天候提供服務，由他們幫你撰寫規則防範 Layer 7 應用層的攻擊 免費使用 AWS WAF 和 AWS Firewall Manager 有些 AWS 服務如 CloudFront、Global Accelerator 和 Route 53 節點都可另外開啟 Advanced 功能。 ","date":"2022-10-07","objectID":"/blog-for-it/posts/day-22-%E8%B3%87%E5%AE%89%E6%9E%B6%E6%A7%8B/:1:0","tags":["14th鐵人賽","AWS","AWS Shield","AWS WAF","AWS Firewall Manager"],"title":"Day 22 - 資安架構","uri":"/blog-for-it/posts/day-22-%E8%B3%87%E5%AE%89%E6%9E%B6%E6%A7%8B/"},{"categories":null,"content":"WAF AWS WAF 是一種 Web 應用程式防火牆，不耗用過多資源的幫助你保護 Web 應用程式或 API 不受常見的 Layer 7 應用層的攻擊，如 Web 入侵程式和機器人侵擾。 AWS WAF 包含功能完整的 API，以自動化安全規則的建立、部署和維護。 透過 規則 去防範這些攻擊，建立的規則來篩選流量，以保護 Web 應用程式不受到攻擊。 例如: 可以篩選 Web 請求的任何部分，諸如 IP 位址、HTTP 標頭、HTTP 本文或 URI 字串。 規則可被快速部屬、快速抵禦攻擊，建立規則的方法有兩種: 使用 AWS 受控的規則、自定義的規則。 使用 AWS 受控的規則，可以快速用於解決 OWASP 10 大安全風險或是那種消耗過多資源、偏移指標或可能導致停機時間的自動化機器人…等常見問題。 由 AWS 或 AWS Marketplace 賣方所管理的一組 預先設定的規則 你也可以建立自定義的規則，建立防爬蟲的或封鎖常見攻擊模式 (如 SQL Injection 或跨網站指令碼) 。 以下是幾種常見的部署情境: 部署在 CloudFront 做為 CDN 解決方案的一部分 部署在 Application Load Balancer 部署在 REST API 的 Amazon API Gateway 部署在 GraphQL API 的 AWS AppSync。 定價是以您部署的規則數以及 Web 應用程式收到的請求數為依據。 ","date":"2022-10-07","objectID":"/blog-for-it/posts/day-22-%E8%B3%87%E5%AE%89%E6%9E%B6%E6%A7%8B/:2:0","tags":["14th鐵人賽","AWS","AWS Shield","AWS WAF","AWS Firewall Manager"],"title":"Day 22 - 資安架構","uri":"/blog-for-it/posts/day-22-%E8%B3%87%E5%AE%89%E6%9E%B6%E6%A7%8B/"},{"categories":null,"content":"Firewall Manager AWS Firewall Manager 是一種安全管理服務，擁有以下特點: 簡化跨帳戶管理防火牆規則的程序 在 AWS Organizations 中跨帳戶和應用程式，集中設定和管理防火牆規則 從中央管理員帳戶建立防火牆規則、建立安全政策，並在整個基礎架構中以一致、分層的方式加以執行。 新應用程式的建立時，強制執行一組通用的安全規則讓新應用程式和資源合規 跨帳戶部署工具 可以輕鬆設定分發 Application Load Balancer、API Gateway 和 CloudFront 的 AWS WAF 規則。 可以跨組織中的帳戶和 VPC 部署 AWS Network Firewall。 統一設定並稽核安全群組 為 EC2、Application Load Balancer 和 彈性網路界面 (ENI) 設定新的 VPC 安全群組 稽核現有的 VPC 安全群組。 規則關聯工具 可以將 VPC 與 Route 53 的 Resolvers DNS Firewall 規則進行關聯 結論 看完所有的資安的解決方式，最大問題是怎麼辨識平民跟士兵。平民是正常來存取的流量，也是你服務正常的使用者；士兵則是來者不善，是來竊取、滲透、攻擊你的服務。 有些解決方案會下降服務的可用性，但是可以減少大多數的攻擊。 在 AWS 的資安架構起點是從 Shield 開始，然後搭配 WAF 和 Firewall Manager 來進行嚴密的過濾。 Shield 過濾掉無效的 DDoS 請求 WAF 過濾掉可疑的封包 Firewall Manager 來做集中式管理與部署 (設定防火牆規則或是 WAF 規則) 參考資料 OWASP。TOP 10 AWS。AWS Shield AWS。Firewmal Manager AWS。WAF – Web 應用程式防火牆 ","date":"2022-10-07","objectID":"/blog-for-it/posts/day-22-%E8%B3%87%E5%AE%89%E6%9E%B6%E6%A7%8B/:3:0","tags":["14th鐵人賽","AWS","AWS Shield","AWS WAF","AWS Firewall Manager"],"title":"Day 22 - 資安架構","uri":"/blog-for-it/posts/day-22-%E8%B3%87%E5%AE%89%E6%9E%B6%E6%A7%8B/"},{"categories":null,"content":"[TOC] ECS 彈性容器服務 Elastic Container Service (Amazon ECS)，是一種由 AWS 全受管容器協同運作服務，可輕鬆地讓您部署、管理和擴展容器化應用程式，執行安全、可靠且可擴展的容器。 它與 AWS 平台的其餘部分深度整合，例如可以用 IAM 來進行權限管控，管理不同的 Container 能存取何項 AWS 資源。 Amazon ECS 是一種區域等級的服務，可在一個區域內跨多個可用區域以高可用性的方式執行容器。 ","date":"2022-10-06","objectID":"/blog-for-it/posts/day-21-ecs-%E5%BD%88%E6%80%A7%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8B%99-ecr-%E5%AE%B9%E5%99%A8%E7%99%BB%E9%8C%84/:0:0","tags":["14th鐵人賽","AWS","AWS ECS","AWS ECR"],"title":"Day 21 - ECS 彈性容器服務 \u0026 ECR 容器登錄","uri":"/blog-for-it/posts/day-21-ecs-%E5%BD%88%E6%80%A7%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8B%99-ecr-%E5%AE%B9%E5%99%A8%E7%99%BB%E9%8C%84/"},{"categories":null,"content":"元件 ECS 有以下幾個重要的元件: Clusters 叢集 可以在新的或現有的 VPC 中建立 Amazon ECS 叢集。 是任務或服務的邏輯分組。 使用叢集隔離應用程式，它們就不會使用相同的底層基礎設施。 Task Definitions 任務定義 任務定義用作您應用程式的藍圖。其會指定您應用程式的各種參數。 用來指定作業系統的參數、要使用的容器、應用程式開啟的連接埠，任務中的容器要使用的資料磁碟區。 Tasks 任務 在叢集內將任務定義執行個體化，可以指定叢集上要執行的任務數量。 Services 服務 執行和維護您所需的 Tasks 任務數量。如果有任何任務因任何原因而出現故障或停止會根據您的任務定義啟動另一個執行個體。確保服務需要保持的任務數量。 Container agent 容器代理 在叢集內的每個容器執行個體上執行。 代理程式會將目前正在執行的任務和您容器的資源使用率的相關資訊傳送至 Amazon ECS。 接收到 Amazon ECS 的請求即開始和停止任務。 ","date":"2022-10-06","objectID":"/blog-for-it/posts/day-21-ecs-%E5%BD%88%E6%80%A7%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8B%99-ecr-%E5%AE%B9%E5%99%A8%E7%99%BB%E9%8C%84/:1:0","tags":["14th鐵人賽","AWS","AWS ECS","AWS ECR"],"title":"Day 21 - ECS 彈性容器服務 \u0026 ECR 容器登錄","uri":"/blog-for-it/posts/day-21-ecs-%E5%BD%88%E6%80%A7%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8B%99-ecr-%E5%AE%B9%E5%99%A8%E7%99%BB%E9%8C%84/"},{"categories":null,"content":"啟動類型 可以選擇兩種模式來執行容器: Fargate EC2 Instance AWS 提供了幾種建議，讓你判斷應該使用哪一種啟動方式: Fargate 遇到以下狀況適合使用： 需要最佳化以降低額外負荷的大型工作 偶爾會爆量的小型工作 微小的工作負載 或是 批次工作負載 EC2 遇到以下狀況適合使用： 需要持續高 CPU 核心和記憶體用量 需要針對價格進行最佳化的大型工作任務 應用程式需要存取持久性儲存 必須能直接管理基礎設施 ","date":"2022-10-06","objectID":"/blog-for-it/posts/day-21-ecs-%E5%BD%88%E6%80%A7%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8B%99-ecr-%E5%AE%B9%E5%99%A8%E7%99%BB%E9%8C%84/:2:0","tags":["14th鐵人賽","AWS","AWS ECS","AWS ECR"],"title":"Day 21 - ECS 彈性容器服務 \u0026 ECR 容器登錄","uri":"/blog-for-it/posts/day-21-ecs-%E5%BD%88%E6%80%A7%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8B%99-ecr-%E5%AE%B9%E5%99%A8%E7%99%BB%E9%8C%84/"},{"categories":null,"content":"Fargate 啟動模式 叢集資源由 Fargate 管理，不需要管理 EC2 Instance，無須選擇伺服器類型、決定何時擴展叢集，或最佳化叢集壓縮。 Fargate 也有支援 Linux 容器跟 Windows 容器。(要注意不是所有 AWS 區域都支援) 每個 Fargate 的 Task 都有自己的隔離界限，不會與另一個任務共用基礎核心、CPU 資源、記憶體資源或彈性網路界面。 ECR 容器登錄 Amazon Elastic Container Registry (Amazon ECR) 是 AWS 管理的容器映像登錄服務，具安全性、可擴展性和可靠性。 以下是它的特性: 支援私人的用途 可搭配 Policy 做資源許可，讓指定的使用者或 EC2 Intance 存取儲存庫。 存儲庫 能推送 Docker 映像、(OCI) 映像以及與 OCI 相容的成品 彈性高的存取方式 可以使用偏好的 CLI 來推送、提取和管理映像檔 映像掃描 在推送時掃描並識別容器映像中的軟體漏洞 跨區域、跨 AWS 帳戶複寫。 可以設定私有登入檔設定，授予複寫與提取快取功能的許可 參考資料 AWS。Amazon ECS 元件 淺談 Container 實現原理, 以 Docker 為例(I) 什麼是 Amazon Elastic Container Service？ 什麼是 Amazon Elastic Container Registry？ ","date":"2022-10-06","objectID":"/blog-for-it/posts/day-21-ecs-%E5%BD%88%E6%80%A7%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8B%99-ecr-%E5%AE%B9%E5%99%A8%E7%99%BB%E9%8C%84/:2:1","tags":["14th鐵人賽","AWS","AWS ECS","AWS ECR"],"title":"Day 21 - ECS 彈性容器服務 \u0026 ECR 容器登錄","uri":"/blog-for-it/posts/day-21-ecs-%E5%BD%88%E6%80%A7%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8B%99-ecr-%E5%AE%B9%E5%99%A8%E7%99%BB%E9%8C%84/"},{"categories":null,"content":"[TOC] 微服務架構 微服務架構如果說到很細其實會是一個蠻大的篇章，甚至也有專門書籍來說它。說完篇幅會太長，而且也不會是考試的重點。這邊我用微軟提供的圖來說明，以下是最常見、簡易的架構圖。 微服務怎麼切? 一直都是很熱門的討論話題，最常見就是依據不同商業模組去切微服務。例如: 財務系統、人事系統、訂貨管理系統可能都有各自的微服務。 我認為可以參考 葉志銘先生寫的微服務設計模式心得淺見 裡面對於微服務的架構設計模式更基礎的認識 容器化 (Containerized) 在執行微服務架構的時候，最常使用容器 (Container) 來當作微服務架構的架構底層。 我們可以將應用程式容器化大致幾個重要的元件: Image Registry 存放 Image 的儲存庫，供需要的人下載，Docker Hub 就是最大的一個儲存庫 Image 映像檔，可以把它想像成一個小型的 OS Container 實際從 Image 產生出來，實際的執行個體。 且最常使用 Docker 來作為管理工具，其關係圖可參考: 另外我認為上圖缺少了一個蠻重要的東西，也就是 儲存體 (Storage)。我們在設計架構的時候也必須考慮持續性質的檔案應該要怎麼去做存放。 AWS 微服務容器化架構 在 AWS 實現微服務容器化架構有兩種方式 EKS 和 ECS。 EKS 是 AWS 雲端的 K8S 架構，K8S 內容比較複雜，沒辦法在這一兩篇就說明完畢，以下會使用以 ECS 作為基礎的微服務架構。 基本上有以下幾個重要的 AWS 服務跟傳統的容器化去做對應: Elastic Container Registry (ECR) 對應 Image Registry Elastic Container Service (ECS) 對應 Container Elastic File System 對應 儲存體 其中你可以使用 Fargate 或是 EC2 的 Instance 作為 Container 的載體。 ","date":"2022-10-05","objectID":"/blog-for-it/posts/day-20-%E5%BE%AE%E6%9C%8D%E5%8B%99%E5%AE%B9%E5%99%A8%E5%8C%96%E6%9E%B6%E6%A7%8B/:0:0","tags":["14th鐵人賽","AWS","系統架構","微服務架構"],"title":"Day 20 - 微服務容器化架構","uri":"/blog-for-it/posts/day-20-%E5%BE%AE%E6%9C%8D%E5%8B%99%E5%AE%B9%E5%99%A8%E5%8C%96%E6%9E%B6%E6%A7%8B/"},{"categories":null,"content":"EBS 、 EFS 、 S3 的差異 ? 這邊有提到 EFS ，我們統整一下之前有提到的儲存服務。 EBS (Elastic Block Store) 是之前建立 EC2 時會需要建立的，是 區塊等級 的服務，因此需要將其進行格式化。 EFS (Elastic File System) 是 檔案等級 的服務，在 AWS 可以分散到不同的可用區域，使用的時候透過 掛載磁碟區 (Mount Volume) 的方式來使用，也可以被多個 EC2 Instance 使用，同時訪問 EFS 上的檔案。 S3 也可以算是 檔案等級 的服務，但它相較於 EFS 的使用情境不太一樣，更傾向於對外的功能，因此不能像傳統的文件系統那樣能設定擁有者、權限等。但是儲存費用是三個裡面最便宜的。 參考資料 昕力資訊TPIsoftware。葉志銘。微服務設計模式心得淺見 閱坊。微服務架構中 10 個常用的設計模式 克里斯·理查森。微服務架構設計模式 Microsoft。微服務架構樣式 昕力軟體。葉志銘。微服務設計模式心得淺見 IT 人。《微服務架構設計模式》讀書筆記 | 第1章 逃離單體地獄 Microsoft。Docker 容器、映像和登錄 Geeksforgeeks。Difference Between Amazon EBS and Amazon EFS EBS vs EFS vs S3 – when to use AWS’ three storage solutions AWS EFS vs EBS vs S3 (differences \u0026 when to use?) [closed] ","date":"2022-10-05","objectID":"/blog-for-it/posts/day-20-%E5%BE%AE%E6%9C%8D%E5%8B%99%E5%AE%B9%E5%99%A8%E5%8C%96%E6%9E%B6%E6%A7%8B/:1:0","tags":["14th鐵人賽","AWS","系統架構","微服務架構"],"title":"Day 20 - 微服務容器化架構","uri":"/blog-for-it/posts/day-20-%E5%BE%AE%E6%9C%8D%E5%8B%99%E5%AE%B9%E5%99%A8%E5%8C%96%E6%9E%B6%E6%A7%8B/"},{"categories":null,"content":"[TOC] Serverless Framework 有沒有想過一件事情，既然我們都已經使用 container 跟 serverless 的架構了，我們真的會需要侷限在某朵公有雲上面嗎? Serverless Framework 是一個協助串接各個公有雲的產品，它提供了一個通用的介面，可以讓你從 Azure Function 跳轉到 AWS Lambda。 之後你需要跳到阿里雲、騰訊雲的 Serverless Solution 也都是可以的。 它擁有一些特性: 參數設定使用 YAML 檔格式 監控管理系統 ","date":"2022-10-04","objectID":"/blog-for-it/posts/day-19-serverless-framework/:0:0","tags":["14th鐵人賽","AWS","AWS Lambda","Serverless Framework"],"title":"Day 19 - Serverless Framework","uri":"/blog-for-it/posts/day-19-serverless-framework/"},{"categories":null,"content":"參數設定使用 YAML 檔格式 近幾年來 IaC (Infrastructure as Code)，基礎設施即代碼越來越盛行，Serverless Framework 因其特性是將各家雲端服務上包一層框架。因此有些設定例如: 記憶體大小、回應逾時時間、依賴相關的服務定義，都是透過 YAML 檔來設定。 也因為是檔案的關係，也可以納入版控，這也是 IaC 其中一項優勢。 ","date":"2022-10-04","objectID":"/blog-for-it/posts/day-19-serverless-framework/:1:0","tags":["14th鐵人賽","AWS","AWS Lambda","Serverless Framework"],"title":"Day 19 - Serverless Framework","uri":"/blog-for-it/posts/day-19-serverless-framework/"},{"categories":null,"content":"監控管理系統 Serverless framework 提供了儀錶板畫面，由於它算是 SaaS 服務，是透過 CLI 的方式佈署一些設定，並將資料呈現在他們所提的網頁。 當使用率、錯誤率突然竄升時，會提示警告，同時也可以發出通知或是透過 webhook 綁定你的 API。(如果公司是使用 Slack 來溝通的也有福了~ 他們有直接支援) Serverless framework 會蒐集 Fucntion 的執行狀況，並根據這些資料建議你更適合的 memorySize、timeout，不會讓你多花錢。 安裝 Serverless Framework 首先你需要先有 npm 這個 Javascript 的套件安裝工具。 執行以下指令: npm install -g serverless 最後可以執行 serverless info 確認你安裝是否成功，以及它的版本 建立第一個 Serverless Framework 專案 執行 serverless 這個 command 會跳出以下讓你選擇: Creating a new serverless project? What do you want to make? AWS - Node.js - Starter AWS - Node.js - HTTP API AWS - Node.js - Scheduled Task AWS - Node.js - SQS Worker AWS - Node.js - Express API AWS - Node.js - Express API with DynamoDB AWS - Python - Starter AWS - Python - HTTP API AWS - Python - Scheduled Task AWS - Python - SQS Worker ❯ AWS - Python - Flask API AWS - Python - Flask API with DynamoDB 選擇你要的專案性質，我們這邊可以選 AWS - Python - Flask API。當然我們也可以直接執行: serverless create aws-python-flask-api 這時候會問你要不要登入 serverless dashboard，可以選擇登入後，之後可以查看你佈署的 AWS Lambda 執行的狀況如何。 一旦完成這些步驟，會得到一個下面的目錄架構 └── aws-serverless-project ├── handler.py ├── package.json ├── package-lock.json ├── README.md ├── serverless.yml 其中最重要的檔案就是 serverless.yml，以下有切一個子章節來說明。 到這邊為止大致上就已經是完成第一個 serverless framework 的應用程式了。 ","date":"2022-10-04","objectID":"/blog-for-it/posts/day-19-serverless-framework/:2:0","tags":["14th鐵人賽","AWS","AWS Lambda","Serverless Framework"],"title":"Day 19 - Serverless Framework","uri":"/blog-for-it/posts/day-19-serverless-framework/"},{"categories":null,"content":"serverless.yml 檔案說明 檔案的內容結構大致上長的如下: 整個設定檔可以分為以下幾個區塊: 第一個區塊 是cloud provider 設定，你需要在這邊描述 aws 參數。例如: region、environment variable、vpc … 第二個區塊 是 function 參數設定，這邊會描述你的 lambda function 啟動時的進入點，要用那些 Layer。 第三個區塊 是 resource 定義，這邊是 AWS CloudFormation 的描述，定義需要額外部署的 AWS 資源。 最後是 custom 區塊，這邊可以讓你定義自己的變數 ","date":"2022-10-04","objectID":"/blog-for-it/posts/day-19-serverless-framework/:3:0","tags":["14th鐵人賽","AWS","AWS Lambda","Serverless Framework"],"title":"Day 19 - Serverless Framework","uri":"/blog-for-it/posts/day-19-serverless-framework/"},{"categories":null,"content":"動態變數 大多時候，我們可以用單純的 key-value 來描述 serverless 設定檔 但有時候，我們可以用變數的方式來描述，將你要參照的變數以這樣的方式索引 ${variable-name} serverless 提供以下幾個變數來源： cli 參數 透過 deploy –stage 所帶的參數，可能是 dev / uat / prod 其中一個 custom: deploy_env: ${opt:stage} AWS Parameter Store provider: name: aws role: ${ssm:/lambda/permission/role-arn} AWS Secret Manager custom: DB_USERNAME: ${ssm:/aws/reference/secretsmanager/ambda-${self:custom.deploy_env}}.username DB_PASSWORD: ${ssm:/aws/reference/secretsmanager/lambda-${self:custom.deploy_env}}.password AWS Secret Manager 適合存放金鑰資訊，最大的好處是他整合了任何 AWS 需要 credential 的服務(例如 RDS )，並能夠自動汰換更新，而不需要重新部署服務 AWS CloudFormation layers: - ${cf:mop-lambda-layer-dev.MopLambdaLayerArn} ","date":"2022-10-04","objectID":"/blog-for-it/posts/day-19-serverless-framework/:4:0","tags":["14th鐵人賽","AWS","AWS Lambda","Serverless Framework"],"title":"Day 19 - Serverless Framework","uri":"/blog-for-it/posts/day-19-serverless-framework/"},{"categories":null,"content":"指定環境變數檔 我們可以在 provider 底下增加一個 environment 的參數，定義環境變數的檔案 provider: environment: ${file(./environments.yml)} 其定義長得有點像 .env 檔案。 # environments.yml CONFIG_ENABLE: true EVENT_LOG_ENABLE: true TRACK_ENABLE: true 佈署 Serverless Framework 執行以下指令即可完成佈署 serverless deploy --stage dev 跟 CloudFormation 的關係 看到這裡，我們用一個簡單的圖來說明 serverless 與 CloudFormation 的關係![https://i.imgur.com/ZDkiUay.jpg](I:\\我的雲端硬碟\\Blog\\IT\\content\\posts\\iThome 鐵人賽\\2022\\images\\serverless-cloudformation.jpg) AWS 終究只看得懂 CloudFormation，Serverless 就像是一個 compiler 一樣，負責幫我們把把 Serverless config 打包成一個或多個的 CloudFormation Template 然後供 AWS CloudFormation 佈署使用。 參考資料 Serverless Framework 使用 Node.js + serverless framework + AWS Lambda 打造可擴展、更穩定而且更經濟的架構 Serverless。Notifications Serverless。serverless.yml 設定檔參考資料 Day 17 - 看一下自己寫的東西都去哪了 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 (ithome.com.tw) ","date":"2022-10-04","objectID":"/blog-for-it/posts/day-19-serverless-framework/:5:0","tags":["14th鐵人賽","AWS","AWS Lambda","Serverless Framework"],"title":"Day 19 - Serverless Framework","uri":"/blog-for-it/posts/day-19-serverless-framework/"},{"categories":null,"content":"大數據應用場景 自從物聯網問世後，智能車輛、智慧工廠、智慧醫療….等一系列的課題陸陸續續出現。 這類的資料都有一個共通話題─大數據。 大數據資料儲存，是在做 AI 分析前所需要的基礎設備。 簡單來說，沒有大數據做出來的 AI 分析結果，感覺就像是美食佳餚少了一味。 基本上一定會有以下流程: ​ 大數據接收 → 大數據操作 → 大數據倉儲 如何快速的接收資料並暫存、從裡面提取大量資料做整理、存回專門存大數據的資料庫， AWS 都有各自的服務對應。 AWS 大數據架構 以下的 AWS 服務個別對應大數據架構的不同功能: Kinesis 對應 大數據接收 SWF 對應 大數據接收 EMR 對應 大數據操作 Redshift 對應 大數據倉儲 Aurora 對應 大數據倉儲 ","date":"2022-10-02","objectID":"/blog-for-it/posts/day-14-%E5%A4%A7%E6%95%B8%E6%93%9A%E6%9E%B6%E6%A7%8B/:0:0","tags":["14th鐵人賽","AWS","系統架構"],"title":"Day 14- 大數據架構","uri":"/blog-for-it/posts/day-14-%E5%A4%A7%E6%95%B8%E6%93%9A%E6%9E%B6%E6%A7%8B/"},{"categories":null,"content":"[TOC] API Gateway 通常一間大型企業，一定會有很多自己的系統，財務、人事、物料、ERP、CRM、行政….. 等各種系統。 當我要跑某個內部流程的時候，員工不太可能登到各自的系統去做申請。假設公司有 10 個系統我就要記住這 10 個系統的網址，哪天增加第 11 個系統的時候….。 這時候一定會有一個 EIP 企業入口網站。 而 API Gateway 就是統一對外服務的窗口。 也是使用者使用服務時，唯一的一個整合性接口。 整合性接口的好處是，可以集中做監控，查看資料傳輸內容，做出限制流量或是通知管理員。 API Gateway 本身也已經有做高併發與容錯機制 同時也可以整合擁有 API 接口的 AWS 服務。例如: Lambda、EC2、DynamoDB 甚至如果你有透過 VPN Connection 連線的網路，也可以連線到企業內部系統。 ","date":"2022-10-02","objectID":"/blog-for-it/posts/day-17-api-gateway/:0:0","tags":["14th鐵人賽","AWS","AWS API Gateway"],"title":"Day 17 - API Gateway","uri":"/blog-for-it/posts/day-17-api-gateway/"},{"categories":null,"content":"Cache 資料緩存 這算是 API Gateway 最主要的功能，可以減少用戶需要向後端存取資料的次數。 啟用快取時必需選擇快取容量。通常來說，容量越大效能越佳，不過成本也越高。 若需要頻估 Cache 是否真的有作用，可以在 CloudWatch 把 CacheHitCount 和 CacheMissCount 指標納入監控。 ","date":"2022-10-02","objectID":"/blog-for-it/posts/day-17-api-gateway/:1:0","tags":["14th鐵人賽","AWS","AWS API Gateway"],"title":"Day 17 - API Gateway","uri":"/blog-for-it/posts/day-17-api-gateway/"},{"categories":null,"content":"整合 Lambda 製作客製化驗證 每個系統他們的安全驗證機制都不太一樣，有些可能還是傳統的 Session，也些可能已經走 JWT 。 這時候可以寫一個 Lambda，撰寫你的驗證程式碼，當網路封包經過 API Gateway 的時候，就能觸發 Lambda 去做驗證。 或是針對需要較強安全性的系統，去額外撰寫 Lambda 也是一種使用方法。 參考資料 AWS。使用 API Gateway Lambda 授權方 - Amazon API Gateway 小信豬的原始部落。AWS Serverless 學習筆記 - API Gateway) ","date":"2022-10-02","objectID":"/blog-for-it/posts/day-17-api-gateway/:2:0","tags":["14th鐵人賽","AWS","AWS API Gateway"],"title":"Day 17 - API Gateway","uri":"/blog-for-it/posts/day-17-api-gateway/"},{"categories":null,"content":"[TOC] Elastic Load Balancer Elastic Load Balancer 彈性附載平衡器，是 AWS 提供的 Load Balance，可以實現 Layer 4 和 Layer 7 的負載平衡，以下簡稱 Elastic Load Balancer 為 ELB 如果當服務很熱門，一天的中午時段有幾十萬個人來使用你的服務，只有一台伺服器，真的有辦法 Cover 這麼多的流量? 而且真的只能用一台服務器來提供這些處理嗎? 答案是否定的，我們可以開很多台後端主機來協助處理動態的流量。 舉例來說…. 你有看過台鐵的售票口只有一個嗎? 如果有的話，可能是服務人員輪班去吃飯了 可能中秋連假回家烤肉只能吃空氣了。 ","date":"2022-09-24","objectID":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/:0:0","tags":["14th鐵人賽","AWS","AWS ELB"],"title":"Day 09-1 - CloudFront 內容發送網路 CDN","uri":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/"},{"categories":null,"content":"CloudFront \u0026 Elastic Load Balancer 的差異? 前面有提到， CloudFront 流量傳輸上的優化、靜態內容的緩存。 如果流量需要的是動態內容，還是需要丟到伺服器，就需要 ELB 的幫忙了。 因此 ELB 最主要的任務，就是 將流量分散導流 並有效地到達你要的服務上面。 這邊畫一個表格來說明 CloudFront 與 Elastic Load Balance 的差別: CloudFront Elastic Load Balancer 針對靜態流量做優化 針對動態流量去做優化 針對使用者存取公司服務前的端口 開始指派後端服務前的工作分配器 ","date":"2022-09-24","objectID":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/:1:0","tags":["14th鐵人賽","AWS","AWS ELB"],"title":"Day 09-1 - CloudFront 內容發送網路 CDN","uri":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/"},{"categories":null,"content":"Health Check 還記得哪個篇章也有提到 Health Check 嗎? 沒錯 Route 53 有 Health Check 的功能，跟 Route 53 一樣，能確定後面的 Server 是否還活著。 通常 ELB 後面對應的是一個叢集，透過定期用 HTTP 的方式詢問後面的 Instance。 只要其中有一台 Instance 掛點，ELB 就不會將流量導到那台 Instance。 這個設定需要由我們來設定，提供網頁能執行 health check 的 endpoint 給 ELB 做設定。 ","date":"2022-09-24","objectID":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/:2:0","tags":["14th鐵人賽","AWS","AWS ELB"],"title":"Day 09-1 - CloudFront 內容發送網路 CDN","uri":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/"},{"categories":null,"content":"加解密 ELB 提供 流量解密 (SSL Negotiation) 的功能，讓 ELB 後面的 Instance 不用在特別處理解密。 而且相對較為安全，因為不需要將私鑰放到每個 Instance 裡面。 ","date":"2022-09-24","objectID":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/:3:0","tags":["14th鐵人賽","AWS","AWS ELB"],"title":"Day 09-1 - CloudFront 內容發送網路 CDN","uri":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/"},{"categories":null,"content":"黏性會話 - Sticky Session V2 ELB 才有這個功能，我這邊說明一下當有多個 Instance 的時候，可能會遇到的狀況。 就是使用者登入系統的時候，Session 只記錄某一台 Instance 裡面。這時候使用者操作系統，ELB 是有可能導到另外一個 Instance 上面的，這時候因為 Session 沒有在這台 Instace 儲存導致系統誤以為使用者根本沒有登入。 這時候 Sticky Session 就派上用場了！可以記錄用戶的操作，確保使用者固定使用它登入儲存 Session 的那台 Instance 裡面。 僅有 二代 ELB 才有提供 ※建議採取 Stateless 架構，使用統一的共享儲存體來儲存 Session 資訊。 現在常見的會用資料庫或是緩存體(如: Redis) 儲存使用者登入訊息，這樣才能達成最大程度的擴充。 ","date":"2022-09-24","objectID":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/:4:0","tags":["14th鐵人賽","AWS","AWS ELB"],"title":"Day 09-1 - CloudFront 內容發送網路 CDN","uri":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/"},{"categories":null,"content":"Access Log 在 AWS 上，只要是流量服務相關的，一定有 Log 的應用程式。 例如: VPC 提供 Flow Logs; CloudFront 也有提供流量 Log。 ELB 提供 Access Log 來監控外部流量的存取。 ","date":"2022-09-24","objectID":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/:5:0","tags":["14th鐵人賽","AWS","AWS ELB"],"title":"Day 09-1 - CloudFront 內容發送網路 CDN","uri":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/"},{"categories":null,"content":"封包改動 經過 ELB 的封包，會改動一些內容。譬如會增加一個 Request Header X-Forwarded-For (XFF) ，用來判斷客戶端最原始的 IP 位址。 ","date":"2022-09-24","objectID":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/:6:0","tags":["14th鐵人賽","AWS","AWS ELB"],"title":"Day 09-1 - CloudFront 內容發送網路 CDN","uri":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/"},{"categories":null,"content":"ELB 移除時，連線中的用戶會不會馬上受到影響? 答案是，不會。在 AWS 可以啟用 Connection Draining (連線耗盡)，避免用戶在 ELB 刪除時馬上受到影響，且預設為 300 秒，最長可以設定到 3600 秒。 當刪除 ELB 時， 註冊在此 ELB 的 Instance 會取消跟此 ELB 的連結。當超過設定的秒數時，ELB 就會強制關閉連線。 一代目 \u0026 二代目 ELB V1 Classic Load Balance TCP SSL/TLS HTTP / HTTPS V2 Network Load Balance TCP UDP TLS Application Load Balance HTTP / HTTPS gRPC Gateway Load Balance IP ","date":"2022-09-24","objectID":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/:7:0","tags":["14th鐵人賽","AWS","AWS ELB"],"title":"Day 09-1 - CloudFront 內容發送網路 CDN","uri":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/"},{"categories":null,"content":"二代目 ELB 比第一代 ELB 提供了以下: 將 Port 轉發到同一個 EC2 Instance 但是不同的 container (在 EC2 Instance 安裝 Docker 執行容器化程式) 黏性會話 - Sticky Session Application Load Balance 是 Layer 7 應用層的附載平衡器 Network Load Balancer 是 Layer 4 網路層的附載平行器 越偏向上方第七層的負載平衡器可以提供更多 CPU 運算的能力與彈性 越偏向下方第四層的負載平衡器則是可以針對IP與封包做出有效的分流 參考資料 30天鐵人賽介紹 AWS 雲端世界 - 15:　EC2的網路負載平衡服務 Elastic Load Balancing(ELB) - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 (ithome.com.tw) ","date":"2022-09-24","objectID":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/:8:0","tags":["14th鐵人賽","AWS","AWS ELB"],"title":"Day 09-1 - CloudFront 內容發送網路 CDN","uri":"/blog-for-it/posts/day-09-2-elastic-load-balancer-%E8%B2%A0%E8%BC%89%E5%B9%B3%E8%A1%A1/"},{"categories":null,"content":"[TOC] CloudFront 簡單來說，就是雲端的前門。 在軟體的系統架構，很多會採用三層式架構 (網路、運算、儲存)。 可以參考前一天所討論到的架構圖。 但是我們可能會遇到以下挑戰: DDOS 攻擊 部分流量都在瀏覽靜態頁面 所以我們就會思考: 如何快速解決殭屍流量 DDoS 攻擊? 瀏覽靜態網頁的資料，真的有需要每次都連後端主機? 如何在於不改動程式碼的情況下，調整架構就可以達成? 因此 CloudFront 的三個特性就是: 多點接收、緩存、傳輸加速 其中傳輸加速是指流量傳輸上的優化，以現實生活來舉例，就是從原本的省道直接上高速公路的概念，從時速 40-50 公里直接飆上時速 100 公里。 Distribution, Edge Location, Origin Distribution 會在各大洲，各個 Distribution 會有各自的 Edge Location。 Edge Location 會以優化過的連線方式向我們的內容伺服器( Web, AP)取得內容，並作緩存。 加快下次使用者讀取重複內容時，可直接從緩存內取得資料。 就以網路流量來說，就是: ​ User → Edge location → Origin 以架構圖來看，就是長的如下: Distribution 我們可以視為 Edge Location 的群組 提供服務的伺服器，我們稱為 Origion，只有在需要存取動態內容 (例如取得資料庫資料) 才會用到。 協定 CloudFront 提供以下兩種協定: RTMP 影片串流 HTTP 網頁應用 你可以在 Distribution 視情況建立其中一種。 ","date":"2022-09-24","objectID":"/blog-for-it/posts/day-09-1-cloudfront-%E5%85%A7%E5%AE%B9%E7%99%BC%E9%80%81%E7%B6%B2%E8%B7%AF-cdn/:0:0","tags":["14th鐵人賽","AWS","AWS CloudFront"],"title":"Day 09-1 - CloudFront 內容發送網路 CDN","uri":"/blog-for-it/posts/day-09-1-cloudfront-%E5%85%A7%E5%AE%B9%E7%99%BC%E9%80%81%E7%B6%B2%E8%B7%AF-cdn/"},{"categories":null,"content":"限制特定地區用戶存取 \u0026 緩存 我們可以限制某些地區限制訪問 Distribution 來解決 DDoS 攻擊 若在 Edge location 存有 Edge cache ，也可以用來直接回傳用戶端，減少靜態頁面需要到 Origion 重複讀取資源的問題 整合 S3 並設定 OAI 前面在 S3 的章節有提到，S3 不只有儲存的功能，也可以作為網頁伺服器。 若是靜態網頁，可以考慮把靜態網頁的檔案放入 S3 的 Bucket 裡面，並且設定 OAI 存取。 透過這樣子的方式跟其他網頁伺服器相比，可以使用 CloudFront 來監控以及做更精準的流量限制。 另外也有一個好處，就是成本比較便宜。對公有雲來說，運算貴於儲存、儲存貴於傳輸 ","date":"2022-09-24","objectID":"/blog-for-it/posts/day-09-1-cloudfront-%E5%85%A7%E5%AE%B9%E7%99%BC%E9%80%81%E7%B6%B2%E8%B7%AF-cdn/:1:0","tags":["14th鐵人賽","AWS","AWS CloudFront"],"title":"Day 09-1 - CloudFront 內容發送網路 CDN","uri":"/blog-for-it/posts/day-09-1-cloudfront-%E5%85%A7%E5%AE%B9%E7%99%BC%E9%80%81%E7%B6%B2%E8%B7%AF-cdn/"},{"categories":null,"content":"什麼是 OAI ? OAI, Origin Access Identity，原始存取身份。 在 CloudFront 建立 OAI 這個特殊的使用者。並且設定 Bucket Policy 讓 Bucket 允許 CloudFront 讀取資料。 另外我們將 S3 設定為不對外開放，可以讓使用者無法使用 URL 來存取 S3 的 Object，提高安全性。 只要我們有設定 CloudFront 的 OAI，就可以透過 OAI 來存取 S3 的檔案並提供給使用者。 限制 CloudFront 很美好，但不是萬能。有些事情他也是做不到的，我們可以將前端下載的資源加快，但是資料來源是動態需要去存取後端的服務時，就不在 CloudFront 的範疇了，還是得搭配系統架構還有軟體設計來達成。 以現實生活舉例: 我們只能減少消費者到大賣場的時間。 但是消費者要到大賣場逛多久就是另外一個議題了。 ","date":"2022-09-24","objectID":"/blog-for-it/posts/day-09-1-cloudfront-%E5%85%A7%E5%AE%B9%E7%99%BC%E9%80%81%E7%B6%B2%E8%B7%AF-cdn/:2:0","tags":["14th鐵人賽","AWS","AWS CloudFront"],"title":"Day 09-1 - CloudFront 內容發送網路 CDN","uri":"/blog-for-it/posts/day-09-1-cloudfront-%E5%85%A7%E5%AE%B9%E7%99%BC%E9%80%81%E7%B6%B2%E8%B7%AF-cdn/"},{"categories":null,"content":"[TOC] 傳統的高併發架構 通常架構圖如下，會有一個 Load Balance 負責接收 Client 端的請求，並指派到各個伺服器；伺服器會依照不同的工作內容切分不同群組，群組之間的溝通會用常見的 Message Queue 來溝通，最後為了避免每次都會需要進到 Database 查找資料，會將資料寫入記憶體緩存系統，加快下次的查詢。 AWS 可以設定 漸進式擴張 的方式，動態的調整要開多少台伺服器。 AWS 的高併發架構 最常見的三種服務: ELB, Auto Scaling, EC2 另外可能會搭配 CloudFront 作為原本的 CDN、DynamoDB 作為資料庫、ElastiCache 這類的分散式記憶體緩存系統。 C10K 問題 關於高併發的架構，有很多討論 C10K 或是 C1000K 的問題。 C10K 就是單機同時處理 1 萬個請求。現在慢慢的是要達成 C10M 個請求的併發。 這個實際達成達成的方法水有點深，若在不討論雲端架構下的前提下，若在本地端達成是需要考慮到許多問題的。 這也是雲端的優點，你不太需要考慮到本地伺服器的問題，只需要專注在自身的軟體開發流程。 參考資料 35|基础篇：C10K 和 C1000K 回顾 ","date":"2022-09-23","objectID":"/blog-for-it/posts/day-08-%E9%AB%98%E4%BD%B5%E7%99%BC%E6%9E%B6%E6%A7%8B/:0:0","tags":["14th鐵人賽","AWS","系統架構"],"title":"Day 08 - 高併發架構","uri":"/blog-for-it/posts/day-08-%E9%AB%98%E4%BD%B5%E7%99%BC%E6%9E%B6%E6%A7%8B/"},{"categories":null,"content":"[TOC] CloudWatch DevOps 倡導的 CI/CD，其中 CD 裡面就包含 Monitor (監控) 的部分。 CloudWatch 為 AWS 所推出的 監控 服務，能夠監控大多數的 AWS 服務。 另外 CloudWatch 裡面有個 CloudWatch Logs 的功能，開放使用者把自製的 Log 傳回 CloudWatch 。 簡單來說，硬體的監控，AWS 透過 Cloud Watch 幫你完成了。 軟體的監控，你自己可以透過 CloudWatch Logs 蒐集 這樣就可以統一在 CloudWatch 查看所有軟硬體相關的日誌內容了! ","date":"2022-09-22","objectID":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/:0:0","tags":["14th鐵人賽","AWS","AWS CloudWatch","AWS CloudTrail"],"title":"Day 07 - CloudWatch \u0026 CloudTrail 監控與稽核","uri":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/"},{"categories":null,"content":"Metrics 視覺化圖表 只有 Log 應該還不夠吧? 而且只有一堆數字也不直覺，這時候你可以使用 Metrics 來建立視覺化圖表，來幫助你快速了解各種數值快速查找問題的原因。 ","date":"2022-09-22","objectID":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/:1:0","tags":["14th鐵人賽","AWS","AWS CloudWatch","AWS CloudTrail"],"title":"Day 07 - CloudWatch \u0026 CloudTrail 監控與稽核","uri":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/"},{"categories":null,"content":"Metric (指標) \u0026 Dimension (維度) Metric (指標) 是 CloudWatch 的基本概念，可以是要監控的變數。EC2 Instance 的 CPU 用量就是 AWS 提供給我們指標之一。同時這個變數也可以透過自行開發的應用程式傳入 CloudWatch。 Dimension (維度) 是 Metric 的一部分，類似把資料做分類，比較好的解釋是審視 Metric 用不同角度 (Dimension) 來看 從某一個數值轉換為多種數值。可以將維度連接到每個指標，然後用維度來篩選 CloudWatch 傳回的結果。 ","date":"2022-09-22","objectID":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/:1:1","tags":["14th鐵人賽","AWS","AWS CloudWatch","AWS CloudTrail"],"title":"Day 07 - CloudWatch \u0026 CloudTrail 監控與稽核","uri":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/"},{"categories":null,"content":"Alarm 機制 蒐集完 Log，然後呢? 如果真的有錯誤的話不太可能等到有人真的來找你才來滅火吧? 錯誤就像火苗一樣，你不理它，它就燒給你看！ 如果你可以即早發現，還能用滅火器消滅，晚了就只能叫消防隊…. 在資訊世界也是一樣， 我們可以為蒐集到的 Log 設定一些警示條件，當 Log 達到警示條件時，就會發 Alarm 通知管理人員或是調度 AWS 服務做緊急處理。 可以搭配 SNS 服務對 管理者進行 Email 或是手機推播通知。 ","date":"2022-09-22","objectID":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/:2:0","tags":["14th鐵人賽","AWS","AWS CloudWatch","AWS CloudTrail"],"title":"Day 07 - CloudWatch \u0026 CloudTrail 監控與稽核","uri":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/"},{"categories":null,"content":"CloudWatch Agent CloudWatch 是沒有辦法監控機器內的記憶體用量與硬碟內部用量。 但是軟體監控這兩個指標恰好也是個非常重要的觀察指標。 在軟體運作的過程中，會從硬碟讀取資料、並寄放至記憶體，會經常性調度記憶體與硬碟資料。 這時候我們就必須主動在 EC2 的 Instance 安裝 Cloud Watch Agent。 同時我們也可以將軟體的 Log 寫在指定的資料夾位置下，在透過 Agent 將那些 Log 蒐集回去。 這時在 CloudWatch 與 Agent 之間有一個 Log Stream 透過 Log Stream 進行個別監控，當有多個 EC2 Instance 建立 Agent 的時候，各自的 Agent 會有自己的 Log Stream。Log Stream 多起來很難管理怎麼辦? 可以使用 Log Group 將這些 Log Stream 統整起來。 以後軟體的整體運行狀況，就能透過 Log Group 內的 Log 內的狀況來評估。 ","date":"2022-09-22","objectID":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/:3:0","tags":["14th鐵人賽","AWS","AWS CloudWatch","AWS CloudTrail"],"title":"Day 07 - CloudWatch \u0026 CloudTrail 監控與稽核","uri":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/"},{"categories":null,"content":"CloudWatch Event 是由應用程式所丟出或是監控的資源來記錄的一些活動。 可以透過 CloudWatch Event 觸發其他 AWS 資源進行後續操作。例如發出 Alarm 通知用戶 也可以使用 Log Stream 日誌串流，共享相同來源的 Cloud Watch Event。 可以用來即時監視的應用程式或 AWS 資源。 ","date":"2022-09-22","objectID":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/:4:0","tags":["14th鐵人賽","AWS","AWS CloudWatch","AWS CloudTrail"],"title":"Day 07 - CloudWatch \u0026 CloudTrail 監控與稽核","uri":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/"},{"categories":null,"content":"CloudWatch 整體架構圖 CloudTrail 用於行為追蹤，追蹤人員與 AWS 服務的行為操作。 用於推卸責任用的 追蹤問題發生的根本原因，究竟是應用程式關閉的，還是根本就是某位管理人員關閉的。 若有多個 AWS 帳戶，可以將這些帳戶的用戶行為紀錄通通存入 S3 Bucket 集中管理。 也可以搭配 CloudWatch 做視覺化監控與告警通知。 ","date":"2022-09-22","objectID":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/:5:0","tags":["14th鐵人賽","AWS","AWS CloudWatch","AWS CloudTrail"],"title":"Day 07 - CloudWatch \u0026 CloudTrail 監控與稽核","uri":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/"},{"categories":null,"content":"CloudTrail 整體架構 ","date":"2022-09-22","objectID":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/:6:0","tags":["14th鐵人賽","AWS","AWS CloudWatch","AWS CloudTrail"],"title":"Day 07 - CloudWatch \u0026 CloudTrail 監控與稽核","uri":"/blog-for-it/posts/day-07-cloudwatch-cloudtrail-%E7%9B%A3%E6%8E%A7%E8%88%87%E7%A8%BD%E6%A0%B8/"},{"categories":null,"content":"[TOC] 註冊免費的 DNS 服務 這邊我使用 Freenom 註冊一個免費的網域，可以免費使用 12 個月。 這就已經很夠我們做測試用途了。 建立方式請參考 參考資料。 AWS Route 53 是 AWS 提供的 DNS 服務。可以透過 Route 53 購買網域名稱，將網域名稱與指定的伺服器做綁定。 DNS 最重要的資源紀錄可參考下面的 參考資料，這裡我僅說明 A Record、CName 這兩種。 外加 Route 53 透有的 Alias。 ","date":"2022-09-21","objectID":"/blog-for-it/posts/day-06-route-53-dns-%E5%9F%9F%E5%90%8D%E8%A8%BB%E5%86%8A/:0:0","tags":["14th鐵人賽","AWS","AWS Route53","免費 DNS"],"title":"Day 06 - Route 53 DNS 域名註冊","uri":"/blog-for-it/posts/day-06-route-53-dns-%E5%9F%9F%E5%90%8D%E8%A8%BB%E5%86%8A/"},{"categories":null,"content":"A Record、CName、Alias A Record: 把網域名稱直接指向伺服器的 IP。 CName: 把網域名稱轉換成另外一個網域名稱。 Alias: 指派 AWS 服務，其底層是 A Reocrd。 特別說一下 Alias，有些 AWS 服務會提供一個隨機域名，有時我們會希望用我們自家的域名來做導引。此時就會有一段轉發的過程，大約可能會多個 10~50 ms。 這時候，我們就可以使用 Alias 來減少轉發的過程。 ","date":"2022-09-21","objectID":"/blog-for-it/posts/day-06-route-53-dns-%E5%9F%9F%E5%90%8D%E8%A8%BB%E5%86%8A/:1:0","tags":["14th鐵人賽","AWS","AWS Route53","免費 DNS"],"title":"Day 06 - Route 53 DNS 域名註冊","uri":"/blog-for-it/posts/day-06-route-53-dns-%E5%9F%9F%E5%90%8D%E8%A8%BB%E5%86%8A/"},{"categories":null,"content":"導流策略 Route 53 擁有 Health Cehck 的功能，能確定對應的 Server 是否還活著。也因為這個機制，可以把同一個 DNS 指向到多個伺服器。 ","date":"2022-09-21","objectID":"/blog-for-it/posts/day-06-route-53-dns-%E5%9F%9F%E5%90%8D%E8%A8%BB%E5%86%8A/:2:0","tags":["14th鐵人賽","AWS","AWS Route53","免費 DNS"],"title":"Day 06 - Route 53 DNS 域名註冊","uri":"/blog-for-it/posts/day-06-route-53-dns-%E5%9F%9F%E5%90%8D%E8%A8%BB%E5%86%8A/"},{"categories":null,"content":"路由策略 在導流的時候，可以依據一些策略去決定網路路由怎麼走，可以參考以下資料表: 公司客製 地理 效能 Simple routing policy (簡便路由) Geolocation routing policy (地理位置路由) Latency routing policy (延遲路由) Weighted routing policy (加權路由) Geoproximity routing policy (地理位置鄰近性) Failover routing policy (故障轉移) Multivalue answer routing policy (多值回答) 常見以下三種: Failover routing policy 指向主要與備用位置，當主要位置失效時，會自動切換到備用位置。 Latency routing policy 依據對 Client 端而言，最少連線延遲，轉發流量到不同伺服器。 Geolocation routing policy 可依據 Client 的地理位置進行流量的分發。 希望不同地理位置的用戶體驗一致，可以採用此策略。 其他的策略說明如下: Simple routing policy 為此網域執行指定功能的單一資源，如果希望所有用戶端收到相同的回應。例如 web.ken-hong.tk 提供網站服務。 Weighted routing policy 有多個執行相同任務的資源，且要指定移至每個資源的流量比例。例如，兩個或多個 EC2 執行個體。 Multivalue answer routing policy 想要隨機回傳最多 8 個正常的紀錄來回應 DNS 查詢。 Geoproximity routing policy 當你想根據你的資源的地理位置來決定路由，可選擇將資源的流量轉移到另一個位置的資源。 建立託管區域 (Hosted Zones) 類型有兩種: 公有託管區域、私有託管區域。 私有託管區域可以在 VPC 中建立私有 DNS，供內部 Instance 使用，不會將 DNS Record 公開。 參考資料 freenom 免費網域申請 DNS資源紀錄(Resource Record)介紹 What is the maximum number of CNAME records per hosted zone in Route 53? How to Use GoDaddy Domains with AWS Route 53 Hosted Zones ","date":"2022-09-21","objectID":"/blog-for-it/posts/day-06-route-53-dns-%E5%9F%9F%E5%90%8D%E8%A8%BB%E5%86%8A/:2:1","tags":["14th鐵人賽","AWS","AWS Route53","免費 DNS"],"title":"Day 06 - Route 53 DNS 域名註冊","uri":"/blog-for-it/posts/day-06-route-53-dns-%E5%9F%9F%E5%90%8D%E8%A8%BB%E5%86%8A/"},{"categories":null,"content":"[TOC] 為何要選擇 RDS? 在雲端使用 Database 有兩種方式，其一開台 EC2 自行安裝資料庫軟體，其二是選用 RDS 服務。 在 EC2 架設 DB，後續能連入 EC2 調整系統參數。 選用 RDS，雖然 AWS 不開放我們連入作業系統底層做操作，但是卻提供跟 AWS 其他服務整合性更高的選擇。 資料備援與系統的高可用性都可以快速設定完畢。 支援的資料庫引擎如下: Amaazon Aurora PostgreSQL MySQL MariaDB Oracle DB SQL Server DB 的高可用性不外乎執行寫入交易、查詢的結果更快，資料庫系統錯誤時轉換到另一個資料庫確保服務的持續性。 在 RDS 建立的時候，需要指定 Subnet Group，供 RDS 挑選合適的 Subnet 去放置資料庫執行個體。 Subnet Group 是提供一種子網路集合，需在 VPC 中建立。 Mutli-AZ 強調高可用性，在同個 Region 不同 AZ 準備資料庫系統。為資料庫常見的 Master-Standby 資料庫架構。 執行個體當中，有一個會是 Master DB，另一個則是 Standby DB。 啟用 Mutli-AZ 的時候，Standy DB 會幫也會幫忙處理 Read Replica 跟 Snapshot。 一旦 Master DB 掛點了， Standby DB 就可以馬上代替 Master DB 的身份，把工作接續下去。此時 Standby DB 也會變成 Master DB。 ※注意: Mutli-AZ 會負擔相對高額的費用 Read Replica 唯獨副本的存在，是資料庫常見的讀寫分離架構。因為寫入的情況較為重要且只有一位。 為了舒緩主資料庫的流量， RDS 提供了唯獨副本，可供純粹的查詢服務。以下是未啟用 Muti-AZ 時的架構圖: Snapshot 類似前面 EC2 提到的快照功能。 當沒有啟動 Multi-AZ 的時候，做 Snapshot，都是向 Master 做請求，且會有 Downtime 時間 (約略幾秒鐘到幾分鐘) 有啟動 Multi-AZ 的時候，做 Snapshot 可以向 Standby DB 請求，就不會有 Downtime 時間 有分兩種不定期手動備份、週期性自動備份。 當我們刪除 RDS 資料庫的時候，週期性自動備份僅會留下最新的一份。 手動備份的 Snapshot 全部都會留下。 效能調教 不開放我們連入作業系統底層做操作，要怎麼優化資料庫效能? 可以參考以下兩種方法: 使用 Parameter Group 匯入資料庫參數，提升效能 更換硬碟，提升效能 EBS Volume -\u003e Provision iops 類型的 EBS Volume 加密 只有在建立資料庫才可以啟用加密，想對已經存在的資料庫作加密，需將原資料庫做 Snapshot，在經由 Snapshot 復原並建立一個新的資料庫。 這時候就可以加密了 Region 移轉 要將 RDS 換到不同的 Region ，不可以直接轉移。 需要先做成 Snapshot，然後透過 Snapshot 在新指定的 Region 建立新的 RDS 執行個體。 ","date":"2022-09-20","objectID":"/blog-for-it/posts/day-05-2-rds-%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB/:0:0","tags":["14th鐵人賽","AWS","AWS RDS"],"title":"Day 05-2 - RDS 關聯式資料庫","uri":"/blog-for-it/posts/day-05-2-rds-%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB/"},{"categories":null,"content":"[TOC] EC2 Elastic Compute Cloud，是 AWS 提供的運算平台。屬於 IaSS 性質。 基本上各家公有雲都有提供虛擬機的服務。 有些公司對雲端還不熟悉，會先從把地端主機的程式與資料慢慢上雲。 最後再慢慢從主機的程式拉出來到 AWS 的各個服務。當然也有公司最後就只使用 EC2。 同時 AWS EC2 也有支援各種作業系統。如 Linux, Windows, Redhat… 等官方提供的映象檔。 在 AWS 使用 Windows 需要另外付授權費用給微軟，所以在一般情況下會比在 Azure 使用 Windows 還貴 但是依據使用的情境不同跟付費的方案不一樣，外加還有其他零零總總的服務，加起來 AWS 不見得會比較貴 我們建立的 EC2 則通常會被稱為 執行個體 (Instance ) 虛擬映像檔 - AMI Amazon Machine Image, 基本上就是虛擬映像檔，可從 AMI Marketplace 尋找，分為官方版本，第三方廠商製作的版本，透過映像檔可以建立 EC2 的執行個體。 官方版本為免費使用。第三方廠商製作的會將他們的產品包裝，因此可能需要收取軟體的使用費。 要注意 AMI 沒辦法跨 Region，例如在北美建立的 AMI 沒辦法拿到日本東部去做使用。 那如果真的需要拿北美建立的 AMI 到日本東部去做使用怎麼辦? AWS 是透過 Immutable 原則來達成 ","date":"2022-09-20","objectID":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/:0:0","tags":["14th鐵人賽","AWS","AWS EC2","AWS AMI","AWS EBS","AWS ENI","AWS Security Group","網路吞吐量"],"title":"Day 05-1 - EC2 虛擬主機","uri":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/"},{"categories":null,"content":"Immuatable 原則 不能移動已建立的的東西，若要改變，得透過複製的方式來完成 如果真的需要拿北美建立的 AMI 到日本東部去做使用，AWS 實作的細節可以參考以下: 到北美建立的 AMI，對它進行快照 將此快照複製到日本東部 在日本東部的快照，還原為 AMI 硬碟 Elastic Block Storage 分為以下兩大種: Instance Store Elastic Block Storage (EBS) Instance Store 是存在 Instance 裡面的儲存空間，相對於 EBS ，較為穩定、效能相對來說較好。但是當 Instance 關掉的時候，裡面的資料也會跟著消失。 適用的場合在，大量檔案生成與存取。 Elastic Block Store (EBS) 所建立的 磁碟區 (Volume) 是存在在另一個伺服器，與 Instance 的聯結是透過網路的方式。在資訊世界中，網路速度是相對較不穩定的，因此相對於 Instance Store 較沒有那麼穩定、但是資料能持續保存，不會因為 Instance 的關閉而消失。 適用的場合在，資料需要能持續保存。 Linux 環境會將 Volume 掛載在 /dev/… 下 ","date":"2022-09-20","objectID":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/:1:0","tags":["14th鐵人賽","AWS","AWS EC2","AWS AMI","AWS EBS","AWS ENI","AWS Security Group","網路吞吐量"],"title":"Day 05-1 - EC2 虛擬主機","uri":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/"},{"categories":null,"content":"EBS 的種類 前面有提到 EBS 跟 EC2 Instance 的聯結是透過網路。基本上可以分為 SSD 跟 HDD 這兩種，且各自依據不同的使用情境有不同的類型 SSD EBS 佈建 IOPS SSD EBS 一般用途 HDD 輸送量優化 HDD 冷存儲 HDD EBS 磁帶 API 名稱 io1 gp2 st1 sc1 標準 描述 專為對延遲敏感的交易工作附載而設計的最高效能 SSD 磁碟區 針對各種交易工作負載，平衡價格效能的一般用途 SSD 磁碟區 專為經常存取、輸送量密集型工作負載而設計的低成本 HDD 磁碟區 專為存取頻率較低的工作負載而設計的最低成本 HDD 磁碟區 可用於具有較小資料集且資料不常存取的工作負載，或效能一致性不是主要考量時 使用案例 I/O 密集型 NoSQL 和 關聯式資料庫 開機磁碟區、低延遲互動應用程式、開發與測試 大數據、資料倉儲、日誌處理 不常使用，每天只需較少掃描的資料 低頻率資料存取 IOPS: Input/Output Operations Per Second，常用在電腦儲存裝置的效能量測結果，可以視為是每秒的讀寫次數 我們可以從幾種指標去選擇，首先是選擇 SSD 跟 HDD。 SSD 首要的效能屬性是 IOPS；HDD 首要的效能屬性是 網路吞吐量 首先是 磁碟區 (Volumn) 跟 **EC2 執行個體 (Instance)**這兩個方面來選擇，個別擁有幾項評估標準 磁碟區的大小、最大 IOPS、最大網路吞吐量 執行個體的最大 IOPS、最大網路吞吐量 如果是大型資料庫，需要選擇讀寫效能較好的 SSD，且選擇能增強讀寫效能最大化的選擇，追求磁碟區 最大IOPS 跟 最大網路吞吐量的 io1。 如果是大數據應用場景下，注重的高傳輸量優化的 HDD，僅需要注重磁碟區 最大網路吞吐量 的 st1。 如果不常存取，考慮冷儲存的 sc1 的 HDD，使成本最佳化。 對於頻寬、網路吞吐量可以參考常見問題集 快照 - Snapshot 為避免多種原因導致毀損，因此需要做資料備份。 快照 (Snapshot)，如果有管理過 VMWare 或是 Hyper-V 等虛擬機器的人應該都知道。可以透過快照快速回復虛擬機的環境。 將 EBS 做成 Snapshot 以後，可以透過此 Snapshot 複製出新的 EBS 或是 AMI。 通常會需要將 Snapshot 轉成 AMI 有兩種情境: 將現有 Instance 的內容與軟體做一個封裝，未來可用此封裝的 AMI 建立新的 Instance 需要將機器做移轉。例如從東京搬到新加坡 另外可以使用 AWS 提供 Lifecycle manager 協助我們定期做資料備份。 防火牆 - Security Group 為避免惡意流量或是非預期流量存取，也需要因應不同 OS 的網路防範上設計不同，因此有了這個外掛式的防火牆 ─ 安全群組 (Security Group) 規則能設定 輸入規則 (Inbound Rule) 以及 輸出規則 (Outbound Rule) Inbound Rule: 從外部進入 EC2 的網路封包規則，需要設定以下: 允許存取的協定、我方的 Port 號、允許來源網段與 IP Outbound Rule: 內部網路封包發送出來的封包規則，需要設定以下: 對外聯絡用的協定、存取對方的 Port 號、允許的目標網段與 IP 另外還以下幾點特性: 兩個 EC2 Instance 之間的連線，可以設定 Inbound Rule / Outbound Rule 允許或拒絕特定的 Security Groups 進行存取 安全群組，是帶狀態的防火牆，若先前成功傳出去，傳回來的不用考慮 Inbound Rule；反之先前若通過 Inboud Rule，輸出的時候不用考量 Outbound Rule 的規則 網路流量的設計是 Request-Response 的設計，只要有封包丟給服務端，服務端就必須進行回應 網路卡 - Elastic Network Interface 彈性網路接口是 VPC 中的一個邏輯網路元件，也代表了一張虛擬網卡。 每個 EC2 的 Instance 都至少有一張 ENI，可將他們連叫到 VPC 中的執行個體。 AWS 在針對公有 IP 的 Assign 可以有兩種: 綁定公有 IP 使用 Elastic IP，從 Public IP Pool 取得一組固定 IP 綁定到 Instance 不綁定公有 IP Instance 啟動的時候，會去 Public IP Pool 取得一組公有 IP Instance 關機的時候會收回 IP，下次開機的時候公有 IP 的位置會變 Instance 管理方法 最主要的論點是 要不要讓使用者登入操作，可以分為以下兩種: 可以讓使用者進入 Instance 操作，可以透過 連線金鑰 的方式達成 盡量不讓使用者進入 Instance 操作，可以透過 Userdata 來達成 針對 不讓使用者登入操作 這個案例我們來說明一下，因為公有雲相對於私有雲運算資源相對充足，壞了直接開一台新的就好了，但是如果每次都開一台新的，已經部署的應用程式怎麼辦? 這時候就是透過 Userdata 來達成！ ","date":"2022-09-20","objectID":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/:2:0","tags":["14th鐵人賽","AWS","AWS EC2","AWS AMI","AWS EBS","AWS ENI","AWS Security Group","網路吞吐量"],"title":"Day 05-1 - EC2 虛擬主機","uri":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/"},{"categories":null,"content":"Userdata 在 EC2 啟動完 Instance 以後，設定 Userdata 可以快速調整作業系統內的環境。如安裝 Python、nginx 等服務。 優點在於不需要人工手動連入安裝環境。 使用方法就是撰寫腳本語言。例如: Linux 就寫 Shell Script；Windows 就寫 Powershell 的腳本 ","date":"2022-09-20","objectID":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/:3:0","tags":["14th鐵人賽","AWS","AWS EC2","AWS AMI","AWS EBS","AWS ENI","AWS Security Group","網路吞吐量"],"title":"Day 05-1 - EC2 虛擬主機","uri":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/"},{"categories":null,"content":"連線金鑰 使用者產生非對稱金鑰，將私鑰自己收著，公鑰放到 EC2 Instance 上，參考下圖登入方式: ","date":"2022-09-20","objectID":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/:4:0","tags":["14th鐵人賽","AWS","AWS EC2","AWS AMI","AWS EBS","AWS ENI","AWS Security Group","網路吞吐量"],"title":"Day 05-1 - EC2 虛擬主機","uri":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/"},{"categories":null,"content":"透過 SSH 登入 EC2 執行個體 我前面有提過我是透過 wsl 來操作，我在 AWS 開了一台 Ubuntu 22.04 的 EC2 Instance，設定完金鑰後 AWS 會自動下載 *.pem，先將檔案放到 AWS 會建立一個非 root 的使用者，各個 OS 的 Default User 可以參考 這個 sudo ssh -i {{PEM FILE PATH}} ubuntu@{{YOUR EC2 INSTANCE DNS}} 執行個體監控 \u0026 異常通知 AWS 針對 Instance，預設每五分鐘監控一次，如果需要縮短監控時程，可以啟用詳細監控功能 ，設定每分鐘都監控一次。 之後可使用 AWS SNS，發出信件通知異常情況，例如: 設定連續三個異常數據時當作異常狀況。 Placement Group 指定一群 EC2 Instance 啟動位置的策略，有分三種策略: 叢集 將執行個體們包裝在一個可用區域內，降低延遲網路效能。 用在 高效能運算 (High Performance Computing, HPC) 應用程式典型緊密耦合，節點對節點通訊的情境上。 分區 將執行個體分散到各個邏輯分區，不會與不同分區的執行體群組共用底層硬體。 每個邏輯分區具有自己的一組機架，每個機架有自己的網路跟電源。 大量分散和複寫的工作負載(例如: Hadoop、HDFS、HBase、Cassandra 和 Kafka) 通常會採用此策略 分散 嚴格的將執行個體放到不同的底層硬體，減少相互關聯的故障 不會因為壞一台機器，導致壞好幾個 Instance Metadata 執行個體的中繼資料 Metadata，是關於執行個體的資料，可以用來設定或管理執行中的執行個體。包括主機名稱、主機 IP 等資料。 若真的有需要取得 Metadata，不易定要使用 AWS Web Console 或 CLI 可以在執行個體中存取此網址取得能取得的 meta data http://169.254.169.254/latest/meta-data 之後我如果想取得 MAC 位置，我可以下: curl http://169.254.169.254/latest/meta-data/mac 結果如下 常見問題集 ","date":"2022-09-20","objectID":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/:5:0","tags":["14th鐵人賽","AWS","AWS EC2","AWS AMI","AWS EBS","AWS ENI","AWS Security Group","網路吞吐量"],"title":"Day 05-1 - EC2 虛擬主機","uri":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/"},{"categories":null,"content":"怎麼選擇付費方案? AWS 的付費方案如下: On Demand (隨需) 效能穩定，且用多少付多少 適用在臨時需求且機器需要穩定 Reserved (保留) 長期保留機制，至少一年 適用在長期運行的需求 Schedule Reserved (時程保留) 特定時間才運作 適用在特定時間需要執行計算任務 Spot (競標) 誰出更高的價格，誰就有使用權 你的運算是運算任務會被中斷，但是可以從被中斷後的地方進行 適用在需要運算較強、運算任務可以被中斷的情境 Dedicate (專用主機) 需要使用到特殊軟體的情境，會依據主機規格來進行授權 適用於特殊情況，例如 SQL Server 會依據 CPU 核心數量來決定授權費用 ","date":"2022-09-20","objectID":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/:6:0","tags":["14th鐵人賽","AWS","AWS EC2","AWS AMI","AWS EBS","AWS ENI","AWS Security Group","網路吞吐量"],"title":"Day 05-1 - EC2 虛擬主機","uri":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/"},{"categories":null,"content":"Security Groups 和 NACL 都擁有阻擋封包的功能，這兩者的差異在哪? 我們參考以下翻譯的內容: Security Groups: 你附加到一個 Instance 或 Load Balance 的 Stateful 防火牆。這些自動創建臨時規則，允許從TCP連接返回的流量。你可以根據數據包來自的IP地址/端口，或者更有趣的是，根據數據包來自的實例所附的安全組，來允許/禁止流量。 NACL: 連接到子網的無狀態防火牆。這些只能根據IP和端口允許/阻止數據包。由於它們是 Stateless 的，你必須創建規則以允許返回流量。 這些規則使用起來很麻煩，但對獲得安全沒有必要。 路由表: 這就是路由的方式，並與子網相連。 WAF: 它可以附加到負載均衡器上，做更複雜的過濾類型，如禁止來自某些國家的流量。 舉例: 在一個子網內，只有 Security Groups 可以產生影響。如何防止同一子網中的兩個 Instance 使用 22 號端口 SSH 進入對方，方法是建立一個 Security Groups，只允許來自你的堡壘主機(可能在不同的子網)的 22 號端口的流量。 在子網之間，路由表指定數據包應該如何流動，而 NACL 是允許數據包流動的。 因此，路由表中必須有一個條目，以允許從基站主機到兩個 Instance 的流量。 但是，如果你使用NACL，你就必須允許 22 號端口的流量從堡壘所在的子網進入每個子網，同時也允許流量從TCP 1024到65535端口返回，作為短暫的端口。 結論: Security Groups 是有狀態的，只需要設定輸入或輸出其中一邊規則就好，設定某些服務對外的時候可以直接用這個，是進入 EC2 Instance 前最後的防火牆。 NACL 是無狀態的，需要同時設定兩個才有辦法正確運作，是 VPC 底下的功能。細節內容請參考參考資料。 堡壘主機: bastion host, 網絡上專門設計和配置為抵禦攻擊的專用主機。或是，Private Subnet 的機器沒辦法對外連線，需要 SSH 進入 Private Subnet 的機器進行部屬或診斷，也能稱為 Bastion Host 或 Jump Server ","date":"2022-09-20","objectID":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/:7:0","tags":["14th鐵人賽","AWS","AWS EC2","AWS AMI","AWS EBS","AWS ENI","AWS Security Group","網路吞吐量"],"title":"Day 05-1 - EC2 虛擬主機","uri":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/"},{"categories":null,"content":"能不能自己做映像檔? 可以，透過 Snapshot 轉換成 AMI。 ","date":"2022-09-20","objectID":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/:8:0","tags":["14th鐵人賽","AWS","AWS EC2","AWS AMI","AWS EBS","AWS ENI","AWS Security Group","網路吞吐量"],"title":"Day 05-1 - EC2 虛擬主機","uri":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/"},{"categories":null,"content":"頻寬, 吞吐量的差別? 頻寬 (Bandwidth)：水管的大小 吞吐量 (Throughput)：從水管實際流出的水量 延遲 (Latency)：水從一端到另一端所花費的時間 資料傳輸換算 理論傳輸公式：Time (s) = File Size / Bandwidth 實際傳輸公式：Time (s) = File Size / Throughput 參考資料 Wiki - IOPS Difference between Security Groups, Route Tables, and NACLs? bandwidth-and-throughput 什麼是堡壘機 Bastion Host ","date":"2022-09-20","objectID":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/:9:0","tags":["14th鐵人賽","AWS","AWS EC2","AWS AMI","AWS EBS","AWS ENI","AWS Security Group","網路吞吐量"],"title":"Day 05-1 - EC2 虛擬主機","uri":"/blog-for-it/posts/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/"},{"categories":null,"content":"[TOC] 經典網路拓樸架構 以下為在傳統在地端的網路架構 ※NACL: Network Access Control List VPC Virtual Private Cloud，虛擬私有網路，類似網路環境中的子網域 VPC 擁有以下幾點特性: 單一 Region 中，橫跨所有 Availability Zone Availability Zone 可建立一個或多個子網路 子網路 (Subnet) 只能存在於單一 Availability Zone 預設 VPC 之間無法彼此互連 子網路可設定多個公網段 (Public Subnet) 跟 私網段 (Private Subnet) 預設 VPC 私網段內部的機器無法直接對外 每個子網路都會配置 NACL 防火牆 最常見的網路拓樸圖如下: 服務對接方式 常見的有以下四種對接方式: 私有網段連外網 VPC 以內網方式操作其他 AWS 服務 VPC 串接 VPC 本地網路環境串接 VPC ","date":"2022-09-19","objectID":"/blog-for-it/posts/day-04-2-vpc-%E8%99%9B%E6%93%AC%E7%A7%81%E6%9C%89%E9%9B%B2/:0:0","tags":["14th鐵人賽","AWS","AWS VPC","網路拓樸"],"title":"Day 04-2 - VPC 虛擬私有雲","uri":"/blog-for-it/posts/day-04-2-vpc-%E8%99%9B%E6%93%AC%E7%A7%81%E6%9C%89%E9%9B%B2/"},{"categories":null,"content":"私有網段連外網 在預設情況下，Private Subnet 的機器無法連外網。 因此有可能需要安裝一些套件的時候，是無法安裝的。 這時候就需要透過 NAT Gateway，可參考以下架構圖。 ","date":"2022-09-19","objectID":"/blog-for-it/posts/day-04-2-vpc-%E8%99%9B%E6%93%AC%E7%A7%81%E6%9C%89%E9%9B%B2/:1:0","tags":["14th鐵人賽","AWS","AWS VPC","網路拓樸"],"title":"Day 04-2 - VPC 虛擬私有雲","uri":"/blog-for-it/posts/day-04-2-vpc-%E8%99%9B%E6%93%AC%E7%A7%81%E6%9C%89%E9%9B%B2/"},{"categories":null,"content":"VPC 以內網方式操作其他 AWS 服務 正常情況下，如果 VPC 內部網路需要存取 AWS Service 時，是需要走外網去存取 AWS Service 的。如下圖 Instance 需要存取 S3 需要走 Internet 去做存取。 ![AWS-VPC-VPC 以內網方式操作其他 AWS 服務-Default.drawio](https://raw.githubusercontent.com/kenhong4134/blog-for-it/main/content/posts/iThome%20%E9%90%B5%E4%BA%BA%E8%B3%BD/2022/images/AWS-VPC-VPC 以內網方式操作其他 AWS 服務-Default.drawio.png) 當 VPC 內部的主機需要跟這些服務溝通時會走外網，但是聽起來有點繞遠路。 同樣都是 AWS 的服務，為什麼需要特地繞出去 AWS 再回到 AWS? 這時候可以透過 VPC Endpoint 讓 VPC 內的機器可以 以內網的方式 與 AWS 服務串接，如下圖。 ![AWS-VPC-VPC 以內網方式操作其他 AWS 服務-VPC Endpoint.drawio](https://raw.githubusercontent.com/kenhong4134/blog-for-it/main/content/posts/iThome%20%E9%90%B5%E4%BA%BA%E8%B3%BD/2022/images/AWS-VPC-VPC 以內網方式操作其他 AWS 服務-VPC Endpoint.drawio.png) ","date":"2022-09-19","objectID":"/blog-for-it/posts/day-04-2-vpc-%E8%99%9B%E6%93%AC%E7%A7%81%E6%9C%89%E9%9B%B2/:2:0","tags":["14th鐵人賽","AWS","AWS VPC","網路拓樸"],"title":"Day 04-2 - VPC 虛擬私有雲","uri":"/blog-for-it/posts/day-04-2-vpc-%E8%99%9B%E6%93%AC%E7%A7%81%E6%9C%89%E9%9B%B2/"},{"categories":null,"content":"VPC 串接 VPC 前面有提到，在預設情況下。VPC 之間是沒辦法互相連線，只能走外網存取其他 AWS VPC。如下: ![AWS-VPC-VPC 串接 VPC-Default.drawio](https://raw.githubusercontent.com/kenhong4134/blog-for-it/main/content/posts/iThome%20%E9%90%B5%E4%BA%BA%E8%B3%BD/2022/images/AWS-VPC-VPC 串接 VPC-Default.drawio.png) 但是公司內可能會有多個部門，分別都使用獨立的 VPC，若需要做資料共享 一樣同樣都是 AWS 的服務，不能走更快速的方式直接連線嗎? 這時候我們可以使用 Peering Connection 將兩個子網段進行配對，透過內部網路存取其他 AWS VPC，如下: ![AWS-VPC-VPC 串接 VPC-PeeringConnection.drawio](https://raw.githubusercontent.com/kenhong4134/blog-for-it/main/content/posts/iThome%20%E9%90%B5%E4%BA%BA%E8%B3%BD/2022/images/AWS-VPC-VPC 串接 VPC-PeeringConnection.drawio.png) ","date":"2022-09-19","objectID":"/blog-for-it/posts/day-04-2-vpc-%E8%99%9B%E6%93%AC%E7%A7%81%E6%9C%89%E9%9B%B2/:3:0","tags":["14th鐵人賽","AWS","AWS VPC","網路拓樸"],"title":"Day 04-2 - VPC 虛擬私有雲","uri":"/blog-for-it/posts/day-04-2-vpc-%E8%99%9B%E6%93%AC%E7%A7%81%E6%9C%89%E9%9B%B2/"},{"categories":null,"content":"本地網路環境串接 VPC 通常建立雲端環境不會馬上把所有服務直接轉換至雲端 或是因為一些資安限制，只能從公司網路去進行佈署 AWS 服務或是存取資料。 可以參考以下網路拓樸圖: ![AWS-VPC-本地網路環境串接 VPC .drawio](https://raw.githubusercontent.com/kenhong4134/blog-for-it/main/content/posts/iThome%20%E9%90%B5%E4%BA%BA%E8%B3%BD/2022/images/AWS-VPC-本地網路環境串接 VPC .drawio.png) 元件特性與說明 Internet Gateway 水平擴展、備援且高可用性 允許 VPC 中的執行個體與外部溝通 Route Table 路由表，讓網路封包能夠有效流出流入 Network access control list 介於 VPC 與各個子網路之間，可以視為防火牆的概念 每個子網路都會配置 NACL 防火牆 屬於靜態防火牆，每次進出都需要審核 NAT Gateway 網路位址轉譯，讓私網段內的機器可對外連線，且不被外部網路所認識。 將私網段的流量導流到公網段後，轉發到外部網路。 VPC Endpoint AWS 有些服務不會在 VPC 裡面(例如 S3) VPC Endpoint 可以走內網的方式存取 AWS 服務 Peering Connection 將兩個不同的 VPC 進行配對，使雙方可以用內網的方式存取對方的資料 兩個 VPC 各自使用對方的私有 IP 進行資料交換 VPN Connection 透過加密的方式從外網連入 VPC 以內網 IP 存取 AWS 資源 Customer Gateway 在 Site-to-Site VPN 的架構中，連接在地端的網路 需要設定兩個通道，若任何一端有問題，VPN Connection 會自動容錯移轉至第二個通道 IPsec 的加解密 監控 VPC 流量 可使用 VPC Flow Logs 追查網路流量。 另外可以將資料內容發佈到 CloudWatch Logs 或 Amazon S3。 ","date":"2022-09-19","objectID":"/blog-for-it/posts/day-04-2-vpc-%E8%99%9B%E6%93%AC%E7%A7%81%E6%9C%89%E9%9B%B2/:4:0","tags":["14th鐵人賽","AWS","AWS VPC","網路拓樸"],"title":"Day 04-2 - VPC 虛擬私有雲","uri":"/blog-for-it/posts/day-04-2-vpc-%E8%99%9B%E6%93%AC%E7%A7%81%E6%9C%89%E9%9B%B2/"},{"categories":null,"content":"[TOC] IAM AWS 的 Root 帳號類似於 Linux ，權限非常大。因此在前面建立 AWS 帳號的時候，我特別先另外建一個 IAM User。 會放在 S3 後面是我們需要有一個 AWS 的服務可以做範例的。 Identity and Access Management，是 AWS 做身分驗證和授權的基礎設施。(前面 S3 用到的 ACL，也算在 IAM 的管理裡面) 其擁有以下特點及功能: 建立使用者 (實際的使用者或是供應用程式使用) 也可設定 MFA 和設定使用者密碼規則 共用 AWS 資源，並用安全的方式進行存取 也可授予侷限的功能給特定的使用者 暫時授予其他擁有密碼的使用者(如公司網路)操作 AWS 的權限 IAM 身分會留下稽核紀錄 (CloudTrail) 最終一致性 IAM 為跨資料中心內多部伺服器來達成高可用性 可搭配標籤功能達成 ABAC(Attribute Based Access Control) 的權限控管 ","date":"2022-09-19","objectID":"/blog-for-it/posts/day-04-1-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/:0:0","tags":["14th鐵人賽","AWS","AWS IAM"],"title":"Day 04-1 - IAM 權限管理大師","uri":"/blog-for-it/posts/day-04-1-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/"},{"categories":null,"content":"最小權限原則 Least Privilege ，AWS 推行的一個看法。 基本上就是使用者只會用到 EC2，就不要給他 S3 等不相干的權限。 如果公司許多角色都會使用 AWS ，且定義明確，可以使用這個原則。 運作方式 這邊可以參考 AWS 官方的架構圖 這邊官方說了很多種術語: IAM 資源 使用者、使用者群組、角色、政策等 IAM 定義 IAM 身分 用於識別、群組的 IAM 資源 這些 IAM 可以被附加政策 (Policy) ，包含使用者、使用者群組、角色。 IAM 實體 用於驗證的 IAM 資源。其中包含 IAM 使用者跟 IAM 角色 委託人 委託人 (Principal) 是指誰向 AWS 索取服務，剩下的可以參考 ","date":"2022-09-19","objectID":"/blog-for-it/posts/day-04-1-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/:1:0","tags":["14th鐵人賽","AWS","AWS IAM"],"title":"Day 04-1 - IAM 權限管理大師","uri":"/blog-for-it/posts/day-04-1-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/"},{"categories":null,"content":"結構設計 graph LR Policy --\u003e Permission Permission --\u003e IAM_Group[IAM Group] Permission --\u003e Role IAM_Group --\u003e User User --\u003e Password User --\u003e Credential Role --\u003e AWS_Resoure[AWS Resoure] Role --\u003e Other[Other Account User] 政策 (Policy) Policy 設定為 JSON 格式，主要有五種屬性可以設定。 E: Effect, 影響 P: Principal, 主體 C: Condition, 條件 A: Action, 動作 R: Resource, 資源 可以用 EPACR 來記憶，而最常見的案例是 EAR AWS 有提供一些已經寫好的 Policy，我們舉兩種角色在實務情境下他們各自設定的 Policy JSON 定義: AdministratorAccess, DatabaseAdministrator AdministratorAccess { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"*\", \"Resource\": \"*\" } ] } DatabaseAdministrator { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"cloudwatch:DeleteAlarms\", \"cloudwatch:Describe*\", \"cloudwatch:DisableAlarmActions\", \"cloudwatch:EnableAlarmActions\", \"cloudwatch:Get*\", \"cloudwatch:List*\", \"cloudwatch:PutMetricAlarm\", \"datapipeline:ActivatePipeline\", \"datapipeline:CreatePipeline\", \"datapipeline:DeletePipeline\", \"datapipeline:DescribeObjects\", \"datapipeline:DescribePipelines\", \"datapipeline:GetPipelineDefinition\", \"datapipeline:ListPipelines\", \"datapipeline:PutPipelineDefinition\", \"datapipeline:QueryObjects\", \"dynamodb:*\", \"ec2:DescribeAccountAttributes\", \"ec2:DescribeAddresses\", \"ec2:DescribeAvailabilityZones\", \"ec2:DescribeInternetGateways\", \"ec2:DescribeSecurityGroups\", \"ec2:DescribeSubnets\", \"ec2:DescribeVpcs\", \"elasticache:*\", \"iam:ListRoles\", \"iam:GetRole\", \"kms:ListKeys\", \"lambda:CreateEventSourceMapping\", \"lambda:CreateFunction\", \"lambda:DeleteEventSourceMapping\", \"lambda:DeleteFunction\", \"lambda:GetFunctionConfiguration\", \"lambda:ListEventSourceMappings\", \"lambda:ListFunctions\", \"logs:DescribeLogGroups\", \"logs:DescribeLogStreams\", \"logs:FilterLogEvents\", \"logs:GetLogEvents\", \"logs:Create*\", \"logs:PutLogEvents\", \"logs:PutMetricFilter\", \"rds:*\", \"redshift:*\", \"s3:CreateBucket\", \"sns:CreateTopic\", \"sns:DeleteTopic\", \"sns:Get*\", \"sns:List*\", \"sns:SetTopicAttributes\", \"sns:Subscribe\", \"sns:Unsubscribe\" ], \"Resource\": \"*\" }, { \"Effect\": \"Allow\", \"Action\": [ \"s3:AbortMultipartUpload\", \"s3:DeleteObject*\", \"s3:Get*\", \"s3:List*\", \"s3:PutAccelerateConfiguration\", \"s3:PutBucketTagging\", \"s3:PutBucketVersioning\", \"s3:PutBucketWebsite\", \"s3:PutLifecycleConfiguration\", \"s3:PutReplicationConfiguration\", \"s3:PutObject*\", \"s3:Replicate*\", \"s3:RestoreObject\" ], \"Resource\": [ \"*\" ] }, { \"Effect\": \"Allow\", \"Action\": [ \"iam:PassRole\" ], \"Resource\": [ \"arn:aws:iam::*:role/rds-monitoring-role\", \"arn:aws:iam::*:role/rdbms-lambda-access\", \"arn:aws:iam::*:role/lambda_exec_role\", \"arn:aws:iam::*:role/lambda-dynamodb-*\", \"arn:aws:iam::*:role/lambda-vpc-execution-role\", \"arn:aws:iam::*:role/DataPipelineDefaultRole\", \"arn:aws:iam::*:role/DataPipelineDefaultResourceRole\" ] } ] } 基本上 Action 裡面紀錄的的是 AWS 的 Permisson 。 Resource 紀錄的是 ARN，也就是受影響的資源。 也有以下不同類型: 受 AWS 控管的 Policy 常見的職業角色都有它對應的職務職能 ( Job Function)，依據這些職能去賦予對應的權限 受客戶控管的 Policy 客戶，也就是指我們這些使用 AWS 的人，自己去設計權限。 ","date":"2022-09-19","objectID":"/blog-for-it/posts/day-04-1-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/:2:0","tags":["14th鐵人賽","AWS","AWS IAM"],"title":"Day 04-1 - IAM 權限管理大師","uri":"/blog-for-it/posts/day-04-1-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/"},{"categories":null,"content":"編寫 Policy 的步驟 graph LR A[Visual Editor] --\u003e |編寫| B[Policy] B --\u003e |測試| C[Policy Simulator] C --\u003e |確認| B B --\u003e |附加| E[Group Role] 在 AWS Web Console 建立 Policy 的時候，就可以透過 Visual Editor 來建立。 不確定 Policy 建立之後的結果，可以使用 Policy Simulator 來測試。 最終確認完的結果，附加到 Group Role。 角色 (Role) 角色能被賦予到 AWS 的服務上面。AWS 服務之間要互相溝通，中間需要透過 Role。 例如我建立了一個 EC2 ，我可以針對我建立的 EC2 指定它的 Role，設定它擁有 S3 的讀取權限。 結論 IAM 是 AWS 在資安管控上最基本的必修課。清楚了解它的功能對於日後在設計軟體時也能提供不少權限控制的想法。 而且 AWS 也提供很大的彈性去調整，可以針對實際遇到的狀況去進行調整。 了解 IAM 能做什麼，Policy 可以怎麼寫，對於日後需要客製化存取 AWS 服務能更快速、準確的寫對。 如果使用情境單純，不妨使用 AWS 現有的角色去去達成您的需求。 參考資料 了解 IAM 的運作方式 AWS 角色功能 了解 IAM 的運作方式 AWS 的 ABAC 是什麼？ - AWS Identity and Access Management (amazon.com) ","date":"2022-09-19","objectID":"/blog-for-it/posts/day-04-1-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/:3:0","tags":["14th鐵人賽","AWS","AWS IAM"],"title":"Day 04-1 - IAM 權限管理大師","uri":"/blog-for-it/posts/day-04-1-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/"},{"categories":null,"content":"[TOC] S3 S3，是 AWS 提供的檔案儲存服務，其全名為 Simple Storage Service。 其應用不是只有單純的提供你讓你的應用程式或是網頁存檔案的需求。 可以把您的靜態網站放在 S3 。 也可以將 AWS 現有雲端原生應用程式與 S3 做整合。建立更有彈性且可靠的服務。 執行大數據分析、AI、ML、HPC 所需要的資料湖泊也會需要 S3 的協助。 備份、災難 (DR) 復原也需要他的存在。 同時也可以將儲存類別設為 S3 Glacier ，幫助你封存可能長期不會使用的檔案。 Bucket \u0026 Object 裡面提到了兩個元件，如果以魚跟冰桶來比喻。 魚就是 Obejct；冰桶就是 Bucket 換句話說，你要儲存的檔案是 Object，檔案儲存的空間是 Bucket Object 依附在 Bucket 底下，且 Object 有一個 唯一 的 https 連結。 可以透過唯一 的 https 連結下載 Object，但是預設會被擋下來。需搭配權限控管才可以下載 S3 儲存類型 在儲存方案的選擇，我們需要考量兩種因素: 可用性 (Availability) 及耐久性 (Durability)。 我這邊一樣使用魚跟冰桶來比喻。 可用性 是，你將魚放到冰桶，你還能不能拿回來。 耐久性 是，你將魚從冰桶拿回來，這條魚是不是已經臭掉了。 因此可用性在於檔案能不能取回；耐久性在於檔案取回時能不能使用。 有分以下幾種儲存類型: S3 Standard 檔案經常存取的情境 儲存任務關鍵型生產資料 S3 Intelligent-Tiering 智慧分層 針對具有不斷變化、未知或不可預測存取模式的資料 適合資料湖泊、分析或新的應用程式 針對經常、不常和很少存取這三個存取方案之間移動資料，進行最佳化且提供低延遲的服務 物件的子集一段時間被封存後，可以啟用專為非同步存取而設計的封存存取方案 Glacier S3 IA S3 -Infrequent Access 儲存不常存取的資料，會另外計算擷取費用 不會有資料解凍時間 有分 Standard 跟 One Zone 兩種，差異在於可用區域的數量 Standard 可用區域 \u003e= 3 One Zone 可用區域 = 1 S3 Glacier Glacier 是冰河的意思 會有資料解凍時間 細節可參考以下篇章 S3 Outposts 這是針對 On-Premises 的資料去儲存 ","date":"2022-09-18","objectID":"/blog-for-it/posts/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/:0:0","tags":["14th鐵人賽","AWS","AWS S3"],"title":"Day 03-2 - S3 檔案儲存服務","uri":"/blog-for-it/posts/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"S3 Glacier 為封存而生的儲存類別。 最好的效能、最大彈性、最低成本 真的只能擇一嗎? 小孩子才做選擇，大人全都要! 我們可以針對不同的使用情況去挑選，可以以使用資料的頻率去判斷資料熱度，這也是蠻多公司會去做的冷熱資料分流，在 AWS S3 Glacier 就幫你做好了。 分為以下三種: Amazon S3 Glacier Instant Retrieval 針對需要立即存取的封存資料，這是一種封存儲存類別，可提供低成本的儲存和毫秒級擷取 例如醫學影像、新聞媒體資產或基因體資料 Amazon S3 Glacier Flexible Retrieval 針對不需要立即存取但需要靈活且免費擷取大型資料集的封存資料 幾分鐘內即可擷取，或在 5-12 小時內免費大量擷取 例如備份或災難復原使用案例 Amazon S3 Glacier Deep Archive 若要在長效封存存儲節省更多費用，請選擇 S3 Glacier Deep Archive，這是雲端中成本最低的儲存，資料擷取時間為 12 小時內。 例如合規封存和數位媒體保存或是幾年以上的帳單資料封存 基本上這些資料擷取時間可以想像成 食物解凍 的時間。你可以在接下來多久的時間內取得。 複寫 S3 提供兩種複寫方式，將同一份資料複製到不同地方，強化備份，讓可用性可高。 跨區域複寫 (CRR): 不同 AWS 區域間的 Bucket 物件複製。如新加坡到東京。 相同區域複寫(SRR): 相同 AWS 區域間的 Bucket 物件複製。如新加坡有 3 個可用區域，就可以複製 3 份。 檔案加密 加密種類有分為兩種加密方法: Server-Side 加密 存放在 AWS KMS 中的 KMS 金鑰 受 S3 託管的加密金鑰 不需要 客戶提供的加密金鑰 Client-Side 加密 使用存放在 AWS KMS 中的 KMS 金鑰 使用存在本地應用程式的加密金鑰 ※S3 僅支援對稱加密 KMS 金鑰，而不支援非對稱 KMS 金鑰。 因為加密的對象是檔案，所以不會使用非對稱式金鑰來加密 S3 在 Client-Side 加密，在加密或解密中不會扮演任何角色。 權限控管 對外有三種管理機制: Access Control List (ACL) Bucket Policy Block Public Access 對內有一種防線: IAM Policy ​ ","date":"2022-09-18","objectID":"/blog-for-it/posts/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/:1:0","tags":["14th鐵人賽","AWS","AWS S3"],"title":"Day 03-2 - S3 檔案儲存服務","uri":"/blog-for-it/posts/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"IAM Policy 對內的意思為在 AWS 的使用者。能透過 IAM 的 Policy 限制該 User 的權限。 ","date":"2022-09-18","objectID":"/blog-for-it/posts/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/:2:0","tags":["14th鐵人賽","AWS","AWS S3"],"title":"Day 03-2 - S3 檔案儲存服務","uri":"/blog-for-it/posts/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"ACL 存取控制清單 (Access Control List), Bucket 和 Object 都有各自的 ACL，但是對外以 Bucket 設定的 ACL 為主。 graph LR User --\u003e |ACL| Bucket Bucket --\u003e |ACL| Object S3 提供幾種預先定義的群組: 已驗證的使用者 通過 AWS 身分驗證的 AWS 帳號 所有使用者 允許世界上任何人存取資源。包含通過身分驗證跟匿名使用者。 可以授予 (Grant) 以下許可 (Permission): READ WRITE READ_ACP WRITE_ACP FULL_CONTROL 後面有加 _ACP 的是讀且或寫入 ACL 所以最常見是設定授予 (Grant) 所有使用者 擁有 READ 這個許可(Permission)。 ","date":"2022-09-18","objectID":"/blog-for-it/posts/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/:3:0","tags":["14th鐵人賽","AWS","AWS S3"],"title":"Day 03-2 - S3 檔案儲存服務","uri":"/blog-for-it/posts/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"Bucket Policy 可以設定更細緻的限制。例如特定 IP，特定的 Http Header 封包。 graph LR User --\u003e |ACL| Bucket User --\u003e |Bucket Policy| Bucket Bucket --\u003e |ACL| Object ","date":"2022-09-18","objectID":"/blog-for-it/posts/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/:4:0","tags":["14th鐵人賽","AWS","AWS S3"],"title":"Day 03-2 - S3 檔案儲存服務","uri":"/blog-for-it/posts/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"Block Public Access 限制檔案不可直接公開。避免設定調整疏失導致 Bucket 跟 Object 直接對外 graph LR User --\u003e B(Block Public Access) B --\u003e |ACL| Bucket B --\u003e |Bucket Policy| Bucket Bucket --\u003e |ACL| Object 備份及還原 災難復原 (DR) 講求的 RTO 和 RPO ","date":"2022-09-18","objectID":"/blog-for-it/posts/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/:5:0","tags":["14th鐵人賽","AWS","AWS S3"],"title":"Day 03-2 - S3 檔案儲存服務","uri":"/blog-for-it/posts/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"檔案刪除 怎麼避免檔案誤刪，或是異動成錯誤資料，有分為以下幾種: Version 透過版本控制，檔案可以更新，也可以還原成舊版。 MFA Delete 需要透過手機等多因子驗證，才可將檔案刪除。 Object Lock 透過物件鎖可以把刪除功能鎖住。 參考資料 Day 03 - 任你存S3 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 (ithome.com.tw) ","date":"2022-09-18","objectID":"/blog-for-it/posts/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/:6:0","tags":["14th鐵人賽","AWS","AWS S3"],"title":"Day 03-2 - S3 檔案儲存服務","uri":"/blog-for-it/posts/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"經典應用架構 這是 AWS 常見且經典的應用架構，請參考以下架構圖 基本上就是把地端的主機拉上來，且部分替換成 AWS 的服務。 如果依傳統在自己家架機房，可能會有以下需求，AWS 都有對應的服務可以使用。 功能 AWS 服務 DNS Route 53 伺服器 / 虛擬機 EC2 資料庫 RDS 檔案儲存伺服器 S3 LDAP / Active Directory IAM 人員管理 ColudTrail 稽核 系統監控 CloudWatch 接下來會說明這個架構會使用到的 AWS 服務。 ","date":"2022-09-18","objectID":"/blog-for-it/posts/day-03-1-%E7%B6%93%E5%85%B8%E6%87%89%E7%94%A8%E6%9E%B6%E6%A7%8B/:0:0","tags":["14th鐵人賽","AWS","系統架構"],"title":"Day 03-1 - 經典應用架構","uri":"/blog-for-it/posts/day-03-1-%E7%B6%93%E5%85%B8%E6%87%89%E7%94%A8%E6%9E%B6%E6%A7%8B/"},{"categories":null,"content":"[TOC] 以前大學老師說過。 新手工程師都愛用 GUI，高手工程師都用 CLI 沒錯，身為高手的我們怎麼可以只用 GUI 畫面來操作呢! 但是對於初心者在前面學習的階段，我覺得 Web Console 的操作可以快速了解服務的功能。 就算日後工作上真的需要，Web Console 也可以滿足 80% 的工作需求。 之前在管理 Azure 的資源時發現，有些功能沒有提供在網頁畫面，只能用指令更新。 為了避免在 AWS 也出現這種窘境，我覺得兩邊都需要略有涉略才會比較保險。 AWS CLI AWS 有 Version 1, Version 2 的差異。官方也有提供如何從 Version 1 改用 Version 的轉移文件。 ","date":"2022-09-17","objectID":"/blog-for-it/posts/day-02-3-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/:0:0","tags":["14th鐵人賽","AWS","AWS CLI"],"title":"Day 02-2 - AWS 基本管理 \u0026 常見名詞","uri":"/blog-for-it/posts/day-02-3-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/"},{"categories":null,"content":"安裝 CLI Linux 安裝方式如下: curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\" unzip awscliv2.zip sudo ./aws/install 然後下已下 command`, aws --version 如果有顯示已下文字內容，即代表安裝成功 aws-cli/2.7.31 Python/3.9.11 Linux/5.10.16.3-microsoft-standard-WSL2 exe/x86_64.ubuntu.22 prompt/off ","date":"2022-09-17","objectID":"/blog-for-it/posts/day-02-3-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/:1:0","tags":["14th鐵人賽","AWS","AWS CLI"],"title":"Day 02-2 - AWS 基本管理 \u0026 常見名詞","uri":"/blog-for-it/posts/day-02-3-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/"},{"categories":null,"content":"設置 Configure 使用已下指令快速設定 aws configure 會需要輸入以下四種資料: AWS Access Key ID AWS Secret Access Key Default region name Default output format 設定完後，~/.aws 會增加兩個檔案 ~/.aws/，credenitals 和 config 因 ","date":"2022-09-17","objectID":"/blog-for-it/posts/day-02-3-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/:2:0","tags":["14th鐵人賽","AWS","AWS CLI"],"title":"Day 02-2 - AWS 基本管理 \u0026 常見名詞","uri":"/blog-for-it/posts/day-02-3-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/"},{"categories":null,"content":"設定多筆 Profile 可參考以下指令 aws configure --profile \u003cYOUR_PROFILE_NAME\u003e ex: aws configure --profile exam_practice 使用 aws configure list 或 aws configure list-profiles 來顯示目前你設定了那些 Profile Question: 每次下指令都需要在後面指定 Profile，是否可以設定預設Default? 在 Shell 下，設定環境變數 AWS_DEFAULT_PROFILE、AWS_PROFILE 都可以。 # 指定 Default Prfile (For Windows) set AWS_DEFAULT_PROFILE=exam_practice set AWS_PROFILE=exam_practice # 指定 Default Prfile (For Linux) export AWS_DEFAULT_PROFILE=exam_practice export AWS_PROFILE=exam_practice # 回復原本預設 (For Linux) unset AWS_DEFAULT_PROFILE unset AWS_PROFILE 如果希望每次修改都能運作，請修改 ~/.bashrc (Hands-on) S3 操作 顯示目前目前所有的 bucket aws s3 ls 參考資料 AWS CLI 官方文件 AWS CLI Version 1 to Version 2 Migration 文件 Set your Default Profile’s Name in AWS CLI ","date":"2022-09-17","objectID":"/blog-for-it/posts/day-02-3-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/:3:0","tags":["14th鐵人賽","AWS","AWS CLI"],"title":"Day 02-2 - AWS 基本管理 \u0026 常見名詞","uri":"/blog-for-it/posts/day-02-3-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/"},{"categories":null,"content":"[TOC] AWS 服務等級 AWS 的服務主要可以分為三個等級: Global 全球等級 Region 各大洲不同國家有不同區域 例如亞太就有新加坡、東京、大阪等區域。 Available Zone 類似資料中心 例如新加坡的可用區域就有三個 可以參考 AWS-區域與可用區域 AWS 管理方式 操作及管理 AWS 有以下幾種方式: AWS Management Console 基本上就是網頁介面，透過 Web 來操作及管理 AWS 資源。後續的文章我會 簡稱 Web Console。 CLI 安裝在電腦上，可透過 Bash 的方式進行管理。 AWS API 可透過 Postman 直接呼叫 API 來管理。 SDK AWS 提供各個程式語言的 SDK，可以供你存取 AWS 的資源或是使用 AWS 的資源。 常見名詞 ARN Amazon Resource Name: 你建立的服務會有一個 ARN，你建立的 IAM User 會有一個 ARN…. AWS 的世界都會使用 ARN 來做身分識別來做權限控制 ","date":"2022-09-17","objectID":"/blog-for-it/posts/day-02-2-aws-%E5%9F%BA%E6%9C%AC%E7%AE%A1%E7%90%86-%E5%B8%B8%E8%A6%8B%E5%90%8D%E8%A9%9E/:0:0","tags":["14th鐵人賽","AWS"],"title":"Day 02-2 - AWS 基本管理 \u0026 常見名詞","uri":"/blog-for-it/posts/day-02-2-aws-%E5%9F%BA%E6%9C%AC%E7%AE%A1%E7%90%86-%E5%B8%B8%E8%A6%8B%E5%90%8D%E8%A9%9E/"},{"categories":null,"content":"[TOC] AWS 免費方案 AWS 有提供免費方案，基本上有分三種: 免費試用 依每個服務不同，提供不同的試用時間，例如: Redshift 是 AWS 的資料倉儲服務，就只提供 2 的月的試用 12 個月免費 12 個月內讓你免費使用，但是有免費使用的額度 永遠免費 雖然免費，但是有額度限制。例如 Lambda 可每個月收 100 萬個請求， SNS 可發佈 100 萬個訊息 基本上考試內容大部分都是 12 個月讓你有限制的使用，但是以 Hands-on Lab 來說已經很夠用了。 例如 EC2 可以讓你每個月使用 750 小時， S3 可以讓你存 5 G 的檔案。 建立 AWS root 帳號 首先進入: https://aws.amazon.com/tw/free/，點選建立免費帳號。 這邊建立需要驗證 Root user 的電子郵件，這邊我輸入我在 Google 建立臨時帳號 帳戶名稱可以隨便打 接下來就是驗證電子郵件能不能使用，去你的信箱收信吧~ (要注意超過 10 分鐘後要重新驗證) Step 1: 輸入 root 密碼 Step 2: 輸入聯絡人資訊，因為我是 For 自己的專案使用，這邊選擇 Personal 地址的部分不知道可以到 google map 查到你地址後，改 url 後面的參數，把 hl 改成 en-us，之後複製地址就好。 最終長得像這樣 Step 3: 輸入信用卡資訊，這邊會有 1 美元的刷卡紀錄驗證你的信用卡，這邊不用慌張，之後會退給你。 Step 4: 輸入你的電話號碼，供驗證使用。 我這邊很不幸手機收不到驗證碼，如果有遇到類似問題的。可以參考 如果我没有接到 AWS 的电话来验证我的新账户，该怎么办？ 按照上面的操作做完， Support Team 會打電話給你，跟你確認 Account ID 跟你的 Email。 之後會寄一封 OTP 的信請你驗證。全程考驗你的英文溝通能力。 確認完後，30分鐘你的帳號就已經啟用了。 Step 5: 選擇你的 Support 計畫，這邊我選擇 Free，畢竟我們只是來試用的。 ※ 建議建立完啟用多因子驗證 MFA，增加日後駭客攻擊的難度 (Optional) 設定 Account Alias 日後公司應該都是一群人或分不同的團隊使用 IAM 登入，不太可能每次都使用 Account ID 進行登入 這時候可以設定 Account Alias，避免要輸入一個落落長但是又難記的數字。 點選 Web Console 的右上角，選擇 Security credentials 點選 Dashboard 後，在 AWS Account 的 Account Alias 點選 Create 建立完之後，可以提供以下網址給團隊成員登入 https://{{YOUR_ACCOUNT_ALIAS}}.signin.aws.amazon.com/console 建立 AWS IAM 帳號 拿到 root 首先應該要建立另外一個帳號，盡量避免 root 帳號濫用。 點選 Web Console 的右上角，選擇 Security credentials 點選 Menu 的 Users，並按下 Add users 設定 AWS 的存取種類，有分 Access Key 跟 Password 兩種。建議可以先兩個都打開 設定 Permission，我選擇 AdministratorAccess 這個受 AWS 管理的權限。 建立後，麻煩將 Access Key Id、Secret access key、Password 記下來，之後就可以不需要再使用 Root 帳號了。 ","date":"2022-09-17","objectID":"/blog-for-it/posts/day-02-1-%E5%BB%BA%E7%AB%8B%E4%BD%A0%E7%9A%84%E5%AD%B8%E7%BF%92-aws-%E5%B8%B3%E6%88%B6/:0:0","tags":["14th鐵人賽","AWS"],"title":"Day 02-1 - 建立你的學習 AWS 帳戶","uri":"/blog-for-it/posts/day-02-1-%E5%BB%BA%E7%AB%8B%E4%BD%A0%E7%9A%84%E5%AD%B8%E7%BF%92-aws-%E5%B8%B3%E6%88%B6/"},{"categories":null,"content":"前言 這是我第一次參加 iThome 的鐵人賽 會想參加比賽的理由在於最近定期的面試過程中不太理想 喜歡的沒有上，沒那麼喜歡的卻拿到 offer 了 而且在面試過程中，也覺得有些能力應該要補起來卻沒有補起來 現在才發覺，原來有些前幾年訂好的目標都沒有達成 因此陷入陷入了一些負面循環 但是….覺得自己廢就要慢慢補起來! 自己也列了一些清單把自己沒那麼熟但是重要的東西列清單 首先下手的對象就是 AWS，因為 公司有補助 自己對 AWS 有興趣 所以想要在這三十天內持續準備，看看自己是不是有能力在鐵人賽三十天後考取 AWS 證照 目標會先以 Developer Associate 、AWS Certified Solutions Architect – Associate 為目標來準備 AWS Certified Solutions Architect – Professional 就有緣再相會 因為我已經擁有微軟 Azure 的部分證照，有些基礎希望準備起來會順利。 30 天…. OK! Let me Fighting! 過程中可能會參考過去完賽的鐵人們，外加一些參考書及書籍我會放在參考資料 雖然我是使用 Windows 電腦為主要開發環境。但是我現在習慣用 VSCode 搭配 WSL 進行開發。 因此主要運作環境為 Ubuntu 22.04 另外如果有需要使用高階程式碼來搭配的話，我會使用 Python 3 架構圖我會搭配 Draw.IO 完賽後這邊會把 30 天的內容放在下面，有興趣可以直接連過去看: Pending 參考資料 ","date":"2022-09-16","objectID":"/blog-for-it/posts/day-01-1-%E5%89%8D%E8%A8%80/:0:0","tags":["14th鐵人賽","AWS"],"title":"Day 01-1 - 前言","uri":"/blog-for-it/posts/day-01-1-%E5%89%8D%E8%A8%80/"},{"categories":null,"content":"書籍 李秉鴻、周廷諺、何松穎。博碩文化。2021.07。大話 AWS 雲端架構 第二版。 ","date":"2022-09-16","objectID":"/blog-for-it/posts/day-01-1-%E5%89%8D%E8%A8%80/:1:0","tags":["14th鐵人賽","AWS"],"title":"Day 01-1 - 前言","uri":"/blog-for-it/posts/day-01-1-%E5%89%8D%E8%A8%80/"},{"categories":null,"content":"部落格 \u0026 文章 iThome。AWS Solution Architect Associate的鐵人不只三項證照之路 iThome。Amazon Cloud Service 30 days challenge 系列。 ","date":"2022-09-16","objectID":"/blog-for-it/posts/day-01-1-%E5%89%8D%E8%A8%80/:2:0","tags":["14th鐵人賽","AWS"],"title":"Day 01-1 - 前言","uri":"/blog-for-it/posts/day-01-1-%E5%89%8D%E8%A8%80/"},{"categories":null,"content":"[TOC] 先看看 AWS 官方怎麼說 首先到 AWS 的官網 查看認證內容，跟開發直接相關的有以下三種: Developer Associate Solutions Architect Associate Solutions Architect Professional 這邊不特別挑 DevOps Engineer Professional 是因為這個比較偏 CI/CD，每間公司的部屬方式跟工具也都不太一樣。 不過這 30 天我也會帶到 AWS Cloudformation 的內容，會有一些簡單的 CI/CD 展示。 關於 CI/CD 更進一步的認識，我會在之後的鐵人賽或是文章做分享 接著我透過 AWS 的培訓與認證官網 的考前準備，還有 說明各個認證要檢驗你那些能力跟考試內容。 ","date":"2022-09-16","objectID":"/blog-for-it/posts/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/:0:0","tags":["14th鐵人賽","AWS"],"title":"Day 01-2 - 了解證照的考試內容 \u0026 了解其他雲的狀況","uri":"/blog-for-it/posts/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/"},{"categories":null,"content":"Developer Associate 驗證內容: 是否能在 AWS 雲端上開發和維護應用程式。 對象: 具備開發和維護 AWS 應用程式一年以上實作經驗的個人 考試內容: 至少對一種高階程式設計語言具備深入的了解 了解核心 AWS 服務，使用服務，以及基本 AWS 架構最佳實務，包括 AWS 共同的責任模型、應用程式生命週期管理和開發處理中容器的使用 使用 AWS 開發、部署和對以雲端為基礎的應用程式偵錯，以及為無伺服器應用程式編寫程式碼的能力。 能夠識別 AWS 服務的關鍵功能，使用 AWS 服務 API、AWS CLI 和開發套件撰寫應用程式 能夠將對雲端原生應用程式的基本理解應用在撰寫程式碼 能夠對 AWS 上的程式碼模組進行編寫、維護以及偵錯 ","date":"2022-09-16","objectID":"/blog-for-it/posts/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/:1:0","tags":["14th鐵人賽","AWS"],"title":"Day 01-2 - 了解證照的考試內容 \u0026 了解其他雲的狀況","uri":"/blog-for-it/posts/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/"},{"categories":null,"content":"Solutions Architect Associate 驗證內容: 是否能在 AWS 設計和部署可擴展、高度可用和具容錯能力之系統。 對象: 具備一年以上實際使用 AWS 設計高可用性、符合成本效益、容錯和可擴展分散式系統的人員 考試內容: 使用 AWS 一年的實作經驗，包括使用運算、聯網、儲存和資料庫 AWS 服務，以及 AWS 部署和管理服務 在 AWS 上部署、管理和操作工作負載，以及實作安全控制和合規要求的經驗 熟悉使用 AWS 管理主控台與 AWS 命令列界面 (CLI) 了解 AWS Well-Architected Framework、AWS 聯網、安全服務以及 AWS 全球基礎設施 識別哪些 AWS 服務滿足指定技術要求和定義 AWS 型應用程式之技術要求的能力 ","date":"2022-09-16","objectID":"/blog-for-it/posts/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/:2:0","tags":["14th鐵人賽","AWS"],"title":"Day 01-2 - 了解證照的考試內容 \u0026 了解其他雲的狀況","uri":"/blog-for-it/posts/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/"},{"categories":null,"content":"Solutions Architect – Professional 驗證內容: 是否能在 AWS 上設計分散式應用程式和系統的進階技術能力和經驗。 對象: 具備兩年以上在 AWS 設計和部署雲端架構實作經驗的個人。 考試內容: 熟悉 AWS CLI、AWS API、AWS CloudFormation 範本、AWS 帳單主控台和 AWS 管理主控台、指令碼語言，以及 Windows 和 Linux 環境 能夠提供跨企業多個應用程式和專案的架構設計最佳實務指引，以及將商業目標對應至應用程式/架構要求 具備評估雲端應用程式需求的能力，以及針對在 AWS 上實作、部署和佈建應用程式，提供架構建議 能夠使用關鍵 AWS 技術 (例如 VPN、AWS Direct Connect) 以及持續整合和部署程序來設計混合架構 學習 Roadmap 總結 目前先以 Developer Associate 跟 Solutions Architect Associate 作為考試的準備目標 基本上要有幾個基本的 IT 能力: 至少會一種高階語言 ( JAVA, C#, Python, Javascript ….) 了解應用程式的生命週期及管理 有能力撰寫 Serverless 應用程式 了解開發過程中，容器上的使用 我們依不同實際使用情境的不同，在 AWS 也可能會有以下幾種架構的設計產生: 經典應用架構 容器化架構 高併發架構 大數據架構 Serverless 架構 混合雲架構 Devops 架構 我會以使用到的架構，來說明會用到的 AWS 服務 其他沒有用到的 AWS 雖然可能不在以上架構裡面 但是我還是一樣會拉出來說明例如: Cognito 鐵人賽完賽後我希望能擁有跟證照希望我們擁有的 AWS 的能力，如下: 了解 AWS Service API, CLI 來管理 AWS 服務，使用 SDK 來撰寫應用程式 識別 AWS 各個服務的關鍵特徵 AWS 責任共擔模式 使用 CI/CD Pipeline 去佈署應用程式 使用 AWS security best practices (例如使用 IAM Role 取代 secret 和 access key) 能編寫、維護、偵錯程式碼模組 了解其他雲的狀況 ","date":"2022-09-16","objectID":"/blog-for-it/posts/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/:3:0","tags":["14th鐵人賽","AWS"],"title":"Day 01-2 - 了解證照的考試內容 \u0026 了解其他雲的狀況","uri":"/blog-for-it/posts/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/"},{"categories":null,"content":"各個雲的服務取代 這部分我在 Azure 發現它很貼心地告訴你如果要從 AWS 移轉到 Azure 有哪些服務可以使用 (甚至從 GCP 移轉到 Azure 也有) 而且我覺得也寫得不錯，各位可以到參考資料尋找一下，另外我也有找到另外一張圖，方便你在有其他雲的基礎下去查有哪些對應服務 ","date":"2022-09-16","objectID":"/blog-for-it/posts/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/:4:0","tags":["14th鐵人賽","AWS"],"title":"Day 01-2 - 了解證照的考試內容 \u0026 了解其他雲的狀況","uri":"/blog-for-it/posts/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/"},{"categories":null,"content":"優缺點 優缺點可參考 sereno 的分析 就我認為 Azure 對於台灣很多公司使用 Windows Server 等相關 Solution 來說是有優勢的。畢竟是自家產品，上雲都有一些 Migration 工具。 AWS 則是因為最早推出市場，所以技術跟教學培訓資源相對較多以及完整。 GCP 在 AI 、 數據分析的能力無庸置疑，在大數據分析、機器學習的技術力相對較強。 ","date":"2022-09-16","objectID":"/blog-for-it/posts/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/:5:0","tags":["14th鐵人賽","AWS"],"title":"Day 01-2 - 了解證照的考試內容 \u0026 了解其他雲的狀況","uri":"/blog-for-it/posts/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/"},{"categories":null,"content":"架構參考 如果以架構中心來說，AWS 跟 Azure 都有提供，Google 的我找不到 我個人覺得 Azure 的架構中心寫的比較簡單易懂，比較適合我閱讀 (也有可能是我曾經看微軟的文件看習慣了?) AWS 跟 Azure 的架構中心我就放在參考資料了 參考資料 AWS 與 Azure 服務相比 AWS VS Azure VS Google – Cloud Comparison 雲端平台比較：Azure、AWS、GCP Azure 架構中心 AWS 架構中心 ","date":"2022-09-16","objectID":"/blog-for-it/posts/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/:6:0","tags":["14th鐵人賽","AWS"],"title":"Day 01-2 - 了解證照的考試內容 \u0026 了解其他雲的狀況","uri":"/blog-for-it/posts/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/"},{"categories":null,"content":"寫文章的心境 我曾經使用過 Google 的部落格，但是發現操作起來不太好用。 再來我那時候寫到後面覺得似乎寫越多，跟這個平台聯結也越多，導致之後被綁死在這個平台。 以下是我整理的一些傳統部落格的缺點: 寫了大量的文章之後，然後網站說關就關 定時備份的文章哪天想要轉換到另一個部落格很麻煩 沒有版本控制 無法離線編輯 各個平台擴充的彈性不一定，也有點受限，要先了解它的部落格機制才有辦法修改 自己架設一個 CMS ? Content Management System，簡稱 CMS 我有想過自己架設一個用 WordPress 架設的 Blog 它是一個強大的平台，很多網頁跟電商都是透過它來架設的 同時它也有很多插件可以使用，但是我最終也沒有選擇它作為我的解決方案，主要是有幾下幾種考量: 要另外花錢架設主機，還要考慮備份 只是換一個綁架對象 網路不通，就沒辦法寫文章了 挫折 遇到這些問題，加上自己當時的技術力也不太夠，漸漸的也就不怎麼愛寫了… 但是之後我發現事情的轉機。 轉機 因為軟體工作的關係。Readme.md 這類專案的起始檔案越來越多，Markdown 的文章格式越來越多人使用。 而且使用方便，程式碼可以顯示不說。 數學函示還有簡單的流程圖都能畫出來。 而且也有許多現成的 IDE 可以使用。如 Typora、MarkdownPad，VS Code 也有插件可以安裝。 我把我自己的筆記盡量用 Markdwon 的文字格式寫下來。 另外也發現近幾年來越來越多人使用 Github Page 來架設自己的部落格。 其中 Jekyll 就直接被 Github Page 官方支援。 讓我認識了 Jekyll 這種純文字轉換成 Blog 文章的靜態網頁產生器。 也就是把你寫的 Markdown 文章，透過 Jekyll 這類的工具，轉換部落格的文章跟網頁。 瞬間我就來勁了! 我就開始研究 Jekyll, Hexo, Hugo 這幾個比較熱門的工具。還有幾個我在 Azure App Service 有看到，可以參考一下此網頁。 過程及結論 我是重度的 Windows 使用者，從最開始接觸 Windows 98 開始到現在已經 Windows 11。 前面一度使用 Jekyll 來當作主要的轉換工具，但是發現問題不少。 光是我要在 Windows 執行 jekyll serve 就遇到一些問題了。 另外是效能問題，文章多的時候轉換的時間會拉長。 文章量只會越來越多，如果處理的時間越來越長。 在來 Jekyll 是 Ruby 語言寫的。是屬於我不熟悉的語言。 之後遇到 Hexo 跟 Hugo 這兩個可以替代的方案。 其中 Hugo 是 Go 語言寫的，且執行效能飛快。 且 Go 語言雖然我目前不會，但是我有把它納入我的學習清單裡面。 因此我這邊最終是使用 Hugo 來當作我的轉換工具 參考資料 [Day06] Jekyll vs Hexo vs Hugo https://ithelp.ithome.com.tw/articles/10269253 https://ithelp.ithome.com.tw/users/20111879/ironman/1749 ","date":"2022-08-25","objectID":"/blog-for-it/posts/01-%E7%82%BA%E4%BB%80%E9%BA%BC-hugo-%E4%BD%9C%E7%82%BA-blog-%E7%9A%84%E5%8E%9F%E5%9B%A0/:0:0","tags":["hugo"],"title":"01. 為什麼選擇 Hugo 作為 Blog 的原因?","uri":"/blog-for-it/posts/01-%E7%82%BA%E4%BB%80%E9%BA%BC-hugo-%E4%BD%9C%E7%82%BA-blog-%E7%9A%84%E5%8E%9F%E5%9B%A0/"},{"categories":null,"content":"EC2 可以 ECS 不確定 ","date":"0001-01-01","objectID":"/blog-for-it/posts/day-10-auto-scaling-%E8%87%AA%E5%8B%95%E5%A2%9E%E6%B8%9B%E6%A9%9F%E5%99%A8/:0:0","tags":null,"title":"","uri":"/blog-for-it/posts/day-10-auto-scaling-%E8%87%AA%E5%8B%95%E5%A2%9E%E6%B8%9B%E6%A9%9F%E5%99%A8/"}]