[{"categories":null,"content":"我曾經使用過 Google 的部落格， 傳統部落格的痛點 傳統的部落格有些缺點: 寫了大量的文章之後，然後網站說關就關 定時備份的文章哪天想要轉換到另一個部落格很麻煩 沒有版本控制 自己架設一個 CRM ? 其實也有很多解法，架設一個 WordPress 那有沒有可靠又方便備份的 主要是有幾下幾種考量: ","date":"2022-08-25","objectID":"/blog-for-it/01-%E7%82%BA%E4%BB%80%E9%BA%BC-hugo-%E4%BD%9C%E7%82%BA-blog-%E7%9A%84%E5%8E%9F%E5%9B%A0/:0:0","tags":["hugo"],"title":"01. 為什麼選擇 Hugo 作為 Blog 的原因","uri":"/blog-for-it/01-%E7%82%BA%E4%BB%80%E9%BA%BC-hugo-%E4%BD%9C%E7%82%BA-blog-%E7%9A%84%E5%8E%9F%E5%9B%A0/"},{"categories":null,"content":"如何挑選想要的 Hugo 主題，首先先回歸到一點 你的部落想想要呈現怎麼樣的風貌 是要分享自己的心得筆記? 還是技術教學文件? 我想要分享什麼，有哪些功能我希望給觀看者體驗的。 我會先尋找自己有那些地方是沒有辦法妥協的。 參考資料及網站 ","date":"2022-08-25","objectID":"/blog-for-it/03-%E6%80%8E%E9%BA%BC%E6%8C%91%E9%81%B8%E8%87%AA%E5%B7%B1%E6%83%B3%E8%A6%81%E7%9A%84%E4%B8%BB%E9%A1%8C/:0:0","tags":["hugo"],"title":"03. 怎麼挑選自己想要的主題","uri":"/blog-for-it/03-%E6%80%8E%E9%BA%BC%E6%8C%91%E9%81%B8%E8%87%AA%E5%B7%B1%E6%83%B3%E8%A6%81%E7%9A%84%E4%B8%BB%E9%A1%8C/"},{"categories":null,"content":"[TOC] Question 有其他書有達到 23種設計模型? 公司提供的書只有提供到 12 種設計模式? 有哪些是書沒有提供的? GoF 書中提 23 個模型 學習目標? 了解應用情境、為何要使用這個模型 分析模式的問題 (Problem) 與作用力 (Force) 設計模式的測試要點 軟體開發 軟體開發包含以下核心行動: - 過程 - 需求 - 設計 - 工程 - 構造 - 測試 - 除錯 - 部署 - 維護 軟體設計 \u0026 軟體工程 軟體設計與軟體工程 程式設計不等同於軟體開發 軟體工程與軟體設計的關係: 軟體工程 （英語：software engineering），是軟體開發領域裡對工程方法的系統應用。 包含設計模式 軟體設計 軟體設計是程式設計師按照特定順序撰寫電腦資料和指令的集合。「軟體設計」可以是撰寫最基礎的二進位0和1位元； 也可以是建立在位元之上的各類軟體語言、演算法、架構、程式、圖像化程式碼來進行。 演算法 ?? 設計模型?? 演算法是算數學題 Design Pattern 是一些常見的系統範本 何謂設計模型 從建築設計領域及人類學引入電腦科學 不直接用來完成程式碼撰寫 使不穩定依賴於相對穩定，避免會引起麻煩的緊耦合 並非所有的軟體模式都是Design Pattern 只軟體設計層次上的問題 架構模式非Design Pattern 演算法是用來解決計算的問題，而非設計上的問題 敘述各種不同情況下，要怎麼解決問題的一種方案 通常以類別或物件來描述其中的關係與相互作用 學會 Design Pattern 的好處及優點 加深物件導向分析與設計的理解 在學習物件導向技術的過程中較早較早學習Design Pattern，可以加深物件導向分析與設計的理解 找工作很有用。 許多軟體開發的職缺，尤其是薪水比較高的職缺，都會列上「熟悉設計模式」這一點。就算沒有列出來，在口試的時候，也經常會被問到。把GoF的23個設計模式都學會，相信找工作的時候，鄉民們會比面試官懂得還多。 自己設計軟體的時候可以用，設計出比較容易擴充與維護的軟體。 比較容易看懂與學會如何使用別人開發的元件或類別庫（例如JDK、.NET或是許多開源軟體，都套用了很多Design Pattern）。 再利用解決方案，避免重蹈前人覆轍 建立通用術語 成為軟體架構師的先修訓練。 每一個Design Pattern都可算是一個迷你版的軟體架構，而許多軟體架構本身也是一種 pattern（architecture pattern，架構模式）。學會 Design Pattern 可以奠定日後成為軟體架構師的基礎。 不被同事或屬下欺騙。 這算什麼好處？曾經有一位專案經理來上Design Pattern的課，他已經不需要自己動手寫程式，他來上課的理由，是希望能夠對於Design Pattern有一定的了解，日後對於程式設計師所訂出來的開發時程，或是和程式設計師溝通軟體開發問題的時候，可以不要差距太遠，或是因為完全不懂而被程式設計師牽著鼻子走。 或者，有時候你的同事或是下屬會跟你「唬爛」，說他套用了多少個pattern，有多麼厲害、多麼偉大。如果完全都不懂，很容易被蒙騙過去。 在了解設計模型前 建議需具備以下能力: 閱讀 UML 能力，至少類別圖需要會 與演算法的差異 演算法主要用來解決 計算上 的問題 而非設計上的問題 ","date":"0001-01-01","objectID":"/blog-for-it/00.-%E7%B8%BD%E8%AB%96/:0:0","tags":null,"title":"","uri":"/blog-for-it/00.-%E7%B8%BD%E8%AB%96/"},{"categories":null,"content":"物件導向基本概念 繼承、封裝、多型 物件、封裝、抽象類別 到底哪個是正確的? 設計模式分類 分類是思考的角度不同，可以分為以下: 建立型模式 結構型模式 行為型模式 併發型模式 前三種可至 Wiki 的 設計範例查看如何實作 建立型模式 類別怎麼產生? 怎麼建立? 用於管理物件的建立 By DESIGN PATTERNS 結構型模式 組合積木，組合各個類別 用於將已有的程式碼集成到新的物件導向設計中 By DESIGN PATTERNS 行為型模式 物件怎麼執行動作? 物件間怎麼交流? 交給下一代? 流水線? 一個指令一個動作? 用於封裝行為的變化 By DESIGN PATTERNS 併發型模式 12 個設計模式 1個設計模型 12 個設計模式 Facade (入門) Adapter (入門) Strategy (入門) Bridge (進階) Abstract Factory (入門) Decorator (進階) Observer (入門) Template Method (入門) Singleton (入門) Double-Checked Locking ?? Object Pool ?? Factory Method (入門) 23 個設計模型 付費課程的分配 ","date":"0001-01-01","objectID":"/blog-for-it/00.-%E7%B8%BD%E8%AB%96/:1:0","tags":null,"title":"","uri":"/blog-for-it/00.-%E7%B8%BD%E8%AB%96/"},{"categories":null,"content":"入門課程涵蓋的內容 核心物件導向設計原則一聽就懂 如何搞懂設計模式的格式框架 套用設計模式前、後之比較 分析模式的問題(Problem)與作用力(Force) 設計模式的測試要點 Singleton模式 Observer模式 Template Method模式 Facade模式 State模式 Factory Method模式 Abstract Factory模式 Strategy模式 Command模式 Adapter模式 Composite模式 ","date":"0001-01-01","objectID":"/blog-for-it/00.-%E7%B8%BD%E8%AB%96/:2:0","tags":null,"title":"","uri":"/blog-for-it/00.-%E7%B8%BD%E8%AB%96/"},{"categories":null,"content":"進階課程涵蓋的內容 基礎物件導向設計原則快速複習 搞懂進階物件導向設計原則 Builder模式 Mediator模式 Bridge模式 Memento模式 Proxy模式 Prototype模式 Decorator模式 Chain of Responsibility模式 Flyweight模式 Iterator模式 Visitor模式 Interpreter模式 延伸字彙 反模式 模式挖掘 軟體重構 程式設計實踐 參考資料 Desgin Patterns - Elements of reusable Object-Oriented Software 收錄了 23 種設計模型 [工商服務] 十、十一月份Design Patterns這樣學就會了入門與進階班 http://teddy-chen-tw.blogspot.com/2014/09/design-patterns.html https://teddysoft.tw/courses/design-patterns-1/ Design Patterns這樣學就會了：進階實作班 http://teddysoft.tw/courses/design-patterns-2/ 漫談模式 ","date":"0001-01-01","objectID":"/blog-for-it/00.-%E7%B8%BD%E8%AB%96/:3:0","tags":null,"title":"","uri":"/blog-for-it/00.-%E7%B8%BD%E8%AB%96/"},{"categories":null,"content":"[TOC] 英文: Facade 中文: 外觀模式 介紹 來自於法文 模式種類: 結構式 目的在於隱藏更大系統的複雜度，隱藏實現細節 未使用的客戶端提供更簡單的街口 涉及到一個 包裝函式 (wrapper) 使用情境與用途 不是單純的封裝嗎? Package 等級的封裝 在複雜的元件中，包出你需要使用的類別或是函式庫 使用頻率 感覺不高，因為你系統要達到很高的複雜度，才會需要 使用案例 ","date":"0001-01-01","objectID":"/blog-for-it/01.-facade/:0:0","tags":null,"title":"","uri":"/blog-for-it/01.-facade/"},{"categories":null,"content":"電腦的啟動 電腦開機的步驟如下: CPU 要先凍結 載入硬碟引導磁區 (BOOT_SECTOR) 至記憶體開機位址 (BOOT_ADDRESS) CPU 跳至記憶體開機位址 CPU 執行 會牽扯到那些複雜函式庫: CPU 的控制 硬碟的控制 記憶體的控制 ","date":"0001-01-01","objectID":"/blog-for-it/01.-facade/:1:0","tags":null,"title":"","uri":"/blog-for-it/01.-facade/"},{"categories":null,"content":"人資與財務的合併報表 需求說明: 你需要產生一張報表，財務需要分析集團內員工的薪資結構，但是你的服務沒有辦法直接存取人資系統跟財務系統，你唯一能用的只有他們提供的服務函式庫 ","date":"0001-01-01","objectID":"/blog-for-it/01.-facade/:2:0","tags":null,"title":"","uri":"/blog-for-it/01.-facade/"},{"categories":null,"content":"[TOC] 英文: Adapter 中文: 配接器模式 介紹 建立一個具備所需介面的新類別，wrapping(包裝)原有類別的方法 ","date":"0001-01-01","objectID":"/blog-for-it/02.-adapter/:0:0","tags":null,"title":"","uri":"/blog-for-it/02.-adapter/"},{"categories":null,"content":"兩種類型 Object Adapter Mode Class Adapter Mode 首先要先了解什麼是繼承，什麼是 Interface，什麼時候應該要使用抽象類別，什麼時候要用介面 abstract class v.s. interface 使用情境與用途 ","date":"0001-01-01","objectID":"/blog-for-it/02.-adapter/:1:0","tags":null,"title":"","uri":"/blog-for-it/02.-adapter/"},{"categories":null,"content":"何時用 Facade ? 何時用 Adapter ? Facade 提供更簡單的使用方式，Adapter 強調實作轉換取決於介面的複雜度 Facade 簡化了介面，易於使用；Adapter 則將一個已有的介面轉換成另一個介面 使用頻率 使用案例 ","date":"0001-01-01","objectID":"/blog-for-it/02.-adapter/:2:0","tags":null,"title":"","uri":"/blog-for-it/02.-adapter/"},{"categories":null,"content":"[TOC] 英文: Strategy 中文: 外觀模式 模式種類: 行為式 發現變化並將其封裝 介紹 使用情境與用途 使用頻率 使用案例 ","date":"0001-01-01","objectID":"/blog-for-it/03.-strategy/:0:0","tags":null,"title":"","uri":"/blog-for-it/03.-strategy/"},{"categories":null,"content":"抽象工廠模式 工廠方法模式 生成器模式 惰性初始模式 ?? 物件池模式 ?? 原型模式 單例模式 多例模式 ?? 資源取得為初始化 ?? ","date":"0001-01-01","objectID":"/blog-for-it/%E5%BB%BA%E7%AB%8B%E5%9E%8B%E6%A8%A1%E5%BC%8F/:0:0","tags":null,"title":"","uri":"/blog-for-it/%E5%BB%BA%E7%AB%8B%E5%9E%8B%E6%A8%A1%E5%BC%8F/"},{"categories":null,"content":"[TOC] 定義 優點 \u0026 缺點 使用情境 注意事項 使用頻率 使用案例 ","date":"0001-01-01","objectID":"/blog-for-it/%E7%AF%84%E6%9C%AC-template/:0:0","tags":null,"title":"","uri":"/blog-for-it/%E7%AF%84%E6%9C%AC-template/"},{"categories":null,"content":"tag: 14th鐵人賽, AWS 前言 這是我第一次參加 iThome 的鐵人賽 會想參加比賽的理由在於最近定期的面試過程中不太理想 喜歡的沒有上，沒那麼喜歡的卻拿到 offer 了 而且在面試過程中，也覺得有些能力應該要補起來卻沒有補起來 現在才發覺，原來有些前幾年訂好的目標都沒有達成 因此陷入陷入了一些負面循環 但是….覺得自己廢就要慢慢補起來! 自己也列了一些清單把自己沒那麼熟但是重要的東西列清單 首先下手的對象就是 AWS，因為 公司有補助 自己對 AWS 有興趣 所以想要在這三十天內持續準備，看看自己是不是有能力在鐵人賽三十天後考取 AWS 證照 目標會先以 Developer Associate 、AWS Certified Solutions Architect – Associate 為目標來準備 AWS Certified Solutions Architect – Professional 就有緣再相會 因為我已經擁有微軟 Azure 的部分證照，有些基礎希望準備起來會順利。 30 天…. OK! Let me Fighting! 過程中可能會參考過去完賽的鐵人們，外加一些參考書及書籍我會放在參考資料 雖然我是使用 Windows 電腦為主要開發環境。但是我現在習慣用 VSCode 搭配 WSL 進行開發。 因此主要運作環境為 Ubuntu 22.04 另外如果有需要使用高階程式碼來搭配的話，我會使用 Python 3 架構圖我會搭配 Draw.IO 完賽後這邊會把 30 天的內容放在下面，有興趣可以直接連過去看: Pending 參考資料: ","date":"0001-01-01","objectID":"/blog-for-it/day-01-1-%E5%89%8D%E8%A8%80/:0:0","tags":null,"title":"","uri":"/blog-for-it/day-01-1-%E5%89%8D%E8%A8%80/"},{"categories":null,"content":"書籍 李秉鴻、周廷諺、何松穎。博碩文化。2021.07。大話 AWS 雲端架構 第二版。 ","date":"0001-01-01","objectID":"/blog-for-it/day-01-1-%E5%89%8D%E8%A8%80/:1:0","tags":null,"title":"","uri":"/blog-for-it/day-01-1-%E5%89%8D%E8%A8%80/"},{"categories":null,"content":"部落格 \u0026 文章 iThome。AWS Solution Architect Associate的鐵人不只三項證照之路 https://ithelp.ithome.com.tw/users/20111554/ironman/3988 ","date":"0001-01-01","objectID":"/blog-for-it/day-01-1-%E5%89%8D%E8%A8%80/:2:0","tags":null,"title":"","uri":"/blog-for-it/day-01-1-%E5%89%8D%E8%A8%80/"},{"categories":null,"content":"tag: 14th鐵人賽, AWS [toc] 先看看 AWS 官方怎麼說 首先到 AWS 的官網 查看認證內容，跟開發直接相關的有以下三種: Developer Associate Solutions Architect Associate Solutions Architect Professional 這邊不特別挑 DevOps Engineer Professional 是因為這個比較偏 CI/CD，每間公司的部屬方式跟工具也都不太一樣。 不過這 30 天我也會帶到 AWS Cloudformation 的內容，會有一些簡單的 CI/CD 展示。 關於 CI/CD 更進一步的認識，我會在之後的鐵人賽或是文章做分享 接著我透過 AWS 的培訓與認證官網 的考前準備，還有 說明各個認證要檢驗你那些能力跟考試內容。 ","date":"0001-01-01","objectID":"/blog-for-it/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/:0:0","tags":null,"title":"","uri":"/blog-for-it/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/"},{"categories":null,"content":"Developer Associate 驗證內容: 是否能在 AWS 雲端上開發和維護應用程式。 對象: 具備開發和維護 AWS 應用程式一年以上實作經驗的個人 考試內容: 至少對一種高階程式設計語言具備深入的了解 了解核心 AWS 服務，使用服務，以及基本 AWS 架構最佳實務，包括 AWS 共同的責任模型、應用程式生命週期管理和開發處理中容器的使用 使用 AWS 開發、部署和對以雲端為基礎的應用程式偵錯，以及為無伺服器應用程式編寫程式碼的能力。 能夠識別 AWS 服務的關鍵功能，使用 AWS 服務 API、AWS CLI 和開發套件撰寫應用程式 能夠將對雲端原生應用程式的基本理解應用在撰寫程式碼 能夠對 AWS 上的程式碼模組進行編寫、維護以及偵錯 ","date":"0001-01-01","objectID":"/blog-for-it/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/:1:0","tags":null,"title":"","uri":"/blog-for-it/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/"},{"categories":null,"content":"Solutions Architect Associate 驗證內容: 是否能在 AWS 設計和部署可擴展、高度可用和具容錯能力之系統。 對象: 具備一年以上實際使用 AWS 設計高可用性、符合成本效益、容錯和可擴展分散式系統的人員 考試內容: 使用 AWS 一年的實作經驗，包括使用運算、聯網、儲存和資料庫 AWS 服務，以及 AWS 部署和管理服務 在 AWS 上部署、管理和操作工作負載，以及實作安全控制和合規要求的經驗 熟悉使用 AWS 管理主控台與 AWS 命令列界面 (CLI) 了解 AWS Well-Architected Framework、AWS 聯網、安全服務以及 AWS 全球基礎設施 識別哪些 AWS 服務滿足指定技術要求和定義 AWS 型應用程式之技術要求的能力 ","date":"0001-01-01","objectID":"/blog-for-it/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/:2:0","tags":null,"title":"","uri":"/blog-for-it/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/"},{"categories":null,"content":"Solutions Architect – Professional 驗證內容: 是否能在 AWS 上設計分散式應用程式和系統的進階技術能力和經驗。 對象: 具備兩年以上在 AWS 設計和部署雲端架構實作經驗的個人。 考試內容: 熟悉 AWS CLI、AWS API、AWS CloudFormation 範本、AWS 帳單主控台和 AWS 管理主控台、指令碼語言，以及 Windows 和 Linux 環境 能夠提供跨企業多個應用程式和專案的架構設計最佳實務指引，以及將商業目標對應至應用程式/架構要求 具備評估雲端應用程式需求的能力，以及針對在 AWS 上實作、部署和佈建應用程式，提供架構建議 能夠使用關鍵 AWS 技術 (例如 VPN、AWS Direct Connect) 以及持續整合和部署程序來設計混合架構 總結 目前先以 Developer Associate 跟 Solutions Architect Associate 作為考試的準備目標 基本上要有幾個基本的 IT 能力: 至少會一種高階語言 ( JAVA, C#, Python, Javascript ….) 了解應用程式的生命週期及管理 有能力撰寫 Serverless 應用程式 了解開發過程中，容器上的使用 我們依不同實際使用情境的不同，在 AWS 也可能會有以下幾種架構的設計產生: 經典應用架構 容器化架構 高併發架構 大數據架構 Serverless 架構 混合雲架構 Devops 架構 我會以使用到的架構，來說明會用到的 AWS 服務 其他沒有用到的 AWS 雖然可能不在以上架構裡面 但是我還是一樣會拉出來說明例如: Cognito 鐵人賽完賽後我希望能擁有跟證照希望我們擁有的 AWS 的能力，如下: 了解 AWS Service API, CLI 來管理 AWS 服務，使用 SDK 來撰寫應用程式 識別 AWS 各個服務的關鍵特徵 AWS 責任共擔模式 使用 CI/CD Pipeline 去佈署應用程式 使用 AWS security best practices (例如使用 IAM Role 取代 secret 和 access key) 能編寫、維護、偵錯程式碼模組 了解其他雲的狀況 ","date":"0001-01-01","objectID":"/blog-for-it/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/:3:0","tags":null,"title":"","uri":"/blog-for-it/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/"},{"categories":null,"content":"各個雲的服務取代 這部分我在 Azure 發現它很貼心地告訴你如果要從 AWS 移轉到 Azure 有哪些服務可以使用 (甚至從 GCP 移轉到 Azure 也有) 而且我覺得也寫得不錯，各位可以到參考資料尋找一下，另外我也有找到另外一張圖，方便你在有其他雲的基礎下去查有哪些對應服務 ","date":"0001-01-01","objectID":"/blog-for-it/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/:4:0","tags":null,"title":"","uri":"/blog-for-it/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/"},{"categories":null,"content":"優缺點 優缺點可參考 sereno 的分析 就我認為 Azure 對於台灣很多公司使用 Windows Server 等相關 Solution 來說是有優勢的。畢竟是自家產品，上雲都有一些 Migration 工具。 AWS 則是因為最早推出市場，所以技術跟教學培訓資源相對較多以及完整。 GCP 在 AI 、 數據分析的能力無庸置疑，在大數據分析、機器學習的技術力相對較強。 ","date":"0001-01-01","objectID":"/blog-for-it/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/:5:0","tags":null,"title":"","uri":"/blog-for-it/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/"},{"categories":null,"content":"架構參考 如果以架構中心來說，AWS 跟 Azure 都有提供，Google 的我找不到 我個人覺得 Azure 的架構中心寫的比較簡單易懂，比較適合我閱讀 (也有可能是我曾經看微軟的文件看習慣了?) AWS 跟 Azure 的架構中心我就放在參考資料了 參考資料 AWS 與 Azure 服務相比 AWS VS Azure VS Google – Cloud Comparison 雲端平台比較：Azure、AWS、GCP Azure 架構中心 AWS 架構中心 ","date":"0001-01-01","objectID":"/blog-for-it/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/:6:0","tags":null,"title":"","uri":"/blog-for-it/day-01-2-%E4%BA%86%E8%A7%A3%E8%AD%89%E7%85%A7%E7%9A%84%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9-%E4%BA%86%E8%A7%A3%E5%85%B6%E4%BB%96%E9%9B%B2%E7%9A%84%E7%8B%80%E6%B3%81/"},{"categories":null,"content":"[TOC] AWS 服務等級 分為三個等級: Global 全球等級 Region 各大洲不同國家有不同區域 例如亞太就有新加坡、東京、大阪等區域。 Available Zone 類似資料中心 例如新加坡的可用區域就有三個 可以參考 AWS-區域與可用區域 AWS 管理方式 操作及管理 AWS 有以下幾種方式: AWS Management Console 基本上就是網頁介面，透過 Web 來操作及管理 AWS 資源。後續的文章我會 簡稱 Web Console。 CLI 安裝在電腦上，可透過 Bash 的方式進行管理。 AWS API 可透過 Postman 直接呼叫 API 來管理。 SDK AWS 提供各個程式語言的 SDK，可以供你存取 AWS 的資源或是使用 AWS 的資源。 常見名詞 ARN Amazon Resource Name: 你建立的服務會有一個 ARN，你建立的 IAM User 會有一個 ARN…. AWS 的世界都會使用 ARN 來做身分識別來做權限控制 ","date":"0001-01-01","objectID":"/blog-for-it/day-02-1-aws-%E5%9F%BA%E6%9C%AC%E7%AE%A1%E7%90%86-%E5%B8%B8%E8%A6%8B%E5%90%8D%E8%A9%9E/:0:0","tags":null,"title":"","uri":"/blog-for-it/day-02-1-aws-%E5%9F%BA%E6%9C%AC%E7%AE%A1%E7%90%86-%E5%B8%B8%E8%A6%8B%E5%90%8D%E8%A9%9E/"},{"categories":null,"content":"[TOC] 以前大學老師說過。 新手工程師都愛用 GUI，高手工程師都用 CLI 沒錯，身為高手的我們怎麼可以只用 GUI 畫面來操作呢! 但是對於初心者在前面學習的階段，我覺得 Web Console 的操作可以快速了解服務的功能。 就算日後工作上真的需要，Web Console 也可以滿足 80% 的工作需求。 之前在管理 Azure 的資源時發現，有些功能沒有提供在網頁畫面，只能用指令更新。 為了避免在 AWS 也出現這種窘境，我覺得兩邊都需要略有涉略才會比較保險。 AWS CLI AWS 有 Version 1, Version 2 的差異。官方也有提供如何從 Version 1 改用 Version 的轉移文件。 ","date":"0001-01-01","objectID":"/blog-for-it/day-02-2-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/:0:0","tags":null,"title":"","uri":"/blog-for-it/day-02-2-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/"},{"categories":null,"content":"安裝 CLI Linux 安裝方式如下: curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\" unzip awscliv2.zip sudo ./aws/install 然後下已下 command`, aws --version 如果有顯示已下文字內容，即代表安裝成功 aws-cli/2.7.31 Python/3.9.11 Linux/5.10.16.3-microsoft-standard-WSL2 exe/x86_64.ubuntu.22 prompt/off ","date":"0001-01-01","objectID":"/blog-for-it/day-02-2-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/:1:0","tags":null,"title":"","uri":"/blog-for-it/day-02-2-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/"},{"categories":null,"content":"設置 Configure 使用已下指令快速設定 aws configure 會需要輸入以下四種資料: AWS Access Key ID AWS Secret Access Key Default region name Default output format 設定完後，~/.aws 會增加兩個檔案 ~/.aws/，credenitals 和 config 因 ","date":"0001-01-01","objectID":"/blog-for-it/day-02-2-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/:2:0","tags":null,"title":"","uri":"/blog-for-it/day-02-2-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/"},{"categories":null,"content":"設定多筆 Profile 可參考以下指令 aws configure --profile \u003cYOUR_PROFILE_NAME\u003e ex: aws configure --profile exam_practice 使用 aws configure list 或 aws configure list-profiles 來顯示目前你設定了那些 Profile Question: 每次下指令都需要在後面指定 Profile，是否可以設定預設Default? 在 Shell 下，設定環境變數 AWS_DEFAULT_PROFILE、AWS_PROFILE 都可以。 # 指定 Default Prfile (For Windows) set AWS_DEFAULT_PROFILE=exam_practice set AWS_PROFILE=exam_practice # 指定 Default Prfile (For Linux) export AWS_DEFAULT_PROFILE=exam_practice export AWS_PROFILE=exam_practice # 回復原本預設 (For Linux) unset AWS_DEFAULT_PROFILE unset AWS_PROFILE 如果希望每次修改都能運作，請修改 ~/.bashrc Hands-on S3 操作 顯示目前目前 aws s3 ls 如果西 參考資料 AWS CLI 官方文件 AWS CLI Version 1 to Version 2 Migration 文件 Set your Default Profile’s Name in AWS CLI ","date":"0001-01-01","objectID":"/blog-for-it/day-02-2-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/:3:0","tags":null,"title":"","uri":"/blog-for-it/day-02-2-aws-%E7%AE%A1%E7%90%86%E5%85%A5%E9%96%80-%E4%BD%BF%E7%94%A8-aws-cli/"},{"categories":null,"content":"[TOC] IAM AWS 的 Root 帳號類似於 Linux ，權限非常大。因此在前面建立 AWS 帳號的時候，我特別先另外建一個 IAM User。 Identity and Access Management，是 AWS 做身分驗證和授權的基礎設施。 提供以下: 建立使用者 (實際的使用者或是供應用程式使用) 會放在 S3 後面是我們需要有一個 AWS 的服務可以做範例的。 ","date":"0001-01-01","objectID":"/blog-for-it/day-02-3-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/:0:0","tags":null,"title":"","uri":"/blog-for-it/day-02-3-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/"},{"categories":null,"content":"最小權限原則 Least Privilege ，AWS 推行的一個看法。 基本上就是使用者只會用到 EC2，就不要給他 S3 等不相干的權限。 如果公司許多角色都會使用 AWS ，且定義明確，可以使用這個原則。 運作方式 這邊可以參考 AWS 官方的架構圖 許可 (Policy) Policy 設定為 JSON 格式，主要有五種屬性可以設定。 E: Effect, 影響 P: Principal, 主體 C: Condition, 條件 A: Action, 動作 R: Resource, 資源 可以用 EPACR 來記憶，而最常見的案例是 EAR AWS 有提供一些已經寫好的 Policy，我們舉兩種角色在實務情境下他們各自設定的 Policy JSON 定義: AdministratorAccess, DatabaseAdministrator AdministratorAccess { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"*\", \"Resource\": \"*\" } ] } DatabaseAdministrator { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"cloudwatch:DeleteAlarms\", \"cloudwatch:Describe*\", \"cloudwatch:DisableAlarmActions\", \"cloudwatch:EnableAlarmActions\", \"cloudwatch:Get*\", \"cloudwatch:List*\", \"cloudwatch:PutMetricAlarm\", \"datapipeline:ActivatePipeline\", \"datapipeline:CreatePipeline\", \"datapipeline:DeletePipeline\", \"datapipeline:DescribeObjects\", \"datapipeline:DescribePipelines\", \"datapipeline:GetPipelineDefinition\", \"datapipeline:ListPipelines\", \"datapipeline:PutPipelineDefinition\", \"datapipeline:QueryObjects\", \"dynamodb:*\", \"ec2:DescribeAccountAttributes\", \"ec2:DescribeAddresses\", \"ec2:DescribeAvailabilityZones\", \"ec2:DescribeInternetGateways\", \"ec2:DescribeSecurityGroups\", \"ec2:DescribeSubnets\", \"ec2:DescribeVpcs\", \"elasticache:*\", \"iam:ListRoles\", \"iam:GetRole\", \"kms:ListKeys\", \"lambda:CreateEventSourceMapping\", \"lambda:CreateFunction\", \"lambda:DeleteEventSourceMapping\", \"lambda:DeleteFunction\", \"lambda:GetFunctionConfiguration\", \"lambda:ListEventSourceMappings\", \"lambda:ListFunctions\", \"logs:DescribeLogGroups\", \"logs:DescribeLogStreams\", \"logs:FilterLogEvents\", \"logs:GetLogEvents\", \"logs:Create*\", \"logs:PutLogEvents\", \"logs:PutMetricFilter\", \"rds:*\", \"redshift:*\", \"s3:CreateBucket\", \"sns:CreateTopic\", \"sns:DeleteTopic\", \"sns:Get*\", \"sns:List*\", \"sns:SetTopicAttributes\", \"sns:Subscribe\", \"sns:Unsubscribe\" ], \"Resource\": \"*\" }, { \"Effect\": \"Allow\", \"Action\": [ \"s3:AbortMultipartUpload\", \"s3:DeleteObject*\", \"s3:Get*\", \"s3:List*\", \"s3:PutAccelerateConfiguration\", \"s3:PutBucketTagging\", \"s3:PutBucketVersioning\", \"s3:PutBucketWebsite\", \"s3:PutLifecycleConfiguration\", \"s3:PutReplicationConfiguration\", \"s3:PutObject*\", \"s3:Replicate*\", \"s3:RestoreObject\" ], \"Resource\": [ \"*\" ] }, { \"Effect\": \"Allow\", \"Action\": [ \"iam:PassRole\" ], \"Resource\": [ \"arn:aws:iam::*:role/rds-monitoring-role\", \"arn:aws:iam::*:role/rdbms-lambda-access\", \"arn:aws:iam::*:role/lambda_exec_role\", \"arn:aws:iam::*:role/lambda-dynamodb-*\", \"arn:aws:iam::*:role/lambda-vpc-execution-role\", \"arn:aws:iam::*:role/DataPipelineDefaultRole\", \"arn:aws:iam::*:role/DataPipelineDefaultResourceRole\" ] } ] } 也有以下不同類型: 受 AWS 控管 其中常見職業角色賦予的權限，職務職能 ( Job Function) ","date":"0001-01-01","objectID":"/blog-for-it/day-02-3-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/:1:0","tags":null,"title":"","uri":"/blog-for-it/day-02-3-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/"},{"categories":null,"content":"編寫 Policy 的步驟 graph LR A[Visual Editor] --\u003e |編寫| B[Policy] B --\u003e |測試| C[Policy Simulator] C --\u003e |確認| B B --\u003e |附加| E[Group Role] 在 AWS Web Console 建立 Policy 的時候，就可以透過 Visual Editor 來建立。 不確定 Policy 建立之後的結果，可以使用 Policy Simulator 來測試。 最終確認完的結果，附加到 Group Role。 角色 (Role) AWS 服務之間要互相溝通，中間需要透過 Role User Groups vs Role? 驗證機制 架構設計 graph LR Policy --\u003e Permission Permission --\u003e IAM_Group[IAM Group] Permission --\u003e Role IAM_Group --\u003e User User --\u003e Password User --\u003e Credential Role --\u003e AWS_Resoure[AWS Resoure] Role --\u003e Other[Other Account User] What’s Permissions? 在設定 IAM 帳號的時候有出現， 這邊有一些受 AWS 控管的 Policy 已經建立好可以使用。 ACL 也算在 IAM 的管理裡面 結論 IAM 是 AWS 在資安管控上最基本的必修課。清楚了解它的功能對於日後在設計網站的時候也能提供不少權限控制的想法。 而且 AWS 也提供很大的彈性 參考資料 了解 IAM 的運作方式 AWS 角色功能 https://docs.aws.amazon.com/IAM/latest/UserGuide/intro-structure.html ","date":"0001-01-01","objectID":"/blog-for-it/day-02-3-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/:2:0","tags":null,"title":"","uri":"/blog-for-it/day-02-3-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/"},{"categories":null,"content":"[TOC] AWS 有提供免費方案，基本上有分三種: 免費試用 依每個服務不同，提供不同的試用時間，例如: Redshift 是 AWS 的資料倉儲服務，就只提供 2 的月的試用 12 個月免費 12 個月內讓你免費使用，但是有免費使用的額度 永遠免費 雖然免費，但是有額度限制。例如 Lambda 可每個月收 100 萬個請求， SNS 可發佈 100 萬個訊息 基本上考試內容大部分都是 12 個月讓你有限制的使用，但是以 Hands-on Lab 來說已經很夠用了。 例如 EC2 可以讓你每個月使用 750 小時， S3 可以讓你存 5 G 的檔案。 建立 AWS root 帳號 首先進入: https://aws.amazon.com/tw/free/，點選建立免費帳號。 這邊建立需要驗證 Root user 的電子郵件，這邊我輸入我在 Google 建立臨時帳號 帳戶名稱可以隨便打 接下來就是驗證電子郵件能不能使用，去你的信箱收信吧~ (要注意超過 10 分鐘後要重新驗證) Step 1: 輸入 root 密碼 Step 2: 輸入聯絡人資訊，因為我是 For 自己的專案使用，這邊選擇 Personal 地址的部分不知道可以到 google map 查到你地址後，改 url 後面的參數，把 hl 改成 en-us，之後複製地址就好。 ![image-20220912162309149](H:\\My Drive\\Blog\\IT\\content\\posts\\iThome 鐵人賽\\2022\\img\\image-20220912162309149.png) ![image-20220912162156059](H:\\My Drive\\Blog\\IT\\content\\posts\\iThome 鐵人賽\\2022\\img\\image-20220912162156059.png) 最終長得像這樣 ![image-20220912163006147](H:\\My Drive\\Blog\\IT\\content\\posts\\iThome 鐵人賽\\2022\\img\\image-20220912163006147.png) Step 3: 輸入信用卡資訊，這邊會有 1 美元的刷卡紀錄驗證你的信用卡，這邊不用慌張，之後會退給你。 Step 4: 輸入你的電話號碼，供驗證使用。 我這邊很不幸手機收不到驗證碼，如果有遇到類似問題的。可以參考 如果我没有接到 AWS 的电话来验证我的新账户，该怎么办？ 按照上面的操作做完， Support Team 會打電話給你，跟你確認 Account ID 跟你的 Email。 之後會寄一封 OTP 的信請你驗證。全程考驗你的英文溝通能力。 確認完後，30分鐘你的帳號就已經啟用了。 Step 5: 選擇你的 Support 計畫，這邊我選擇 Free，畢竟我們只是來試用的。 ※ 建議建立完啟用多因子驗證 MFA，增加日後駭客攻擊的難度 (Optional) 設定 Account Alias 日後公司應該都是一群人或分不同的團隊使用 IAM 登入，不太可能每次都使用 Account ID 進行登入 這時候可以設定 Account Alias，避免要輸入一個落落長但是又難記的數字。 點選 Web Console 的右上角，選擇 Security credentials ![image-20220913160101039](H:\\My Drive\\Blog\\IT\\content\\posts\\iThome 鐵人賽\\2022\\img\\image-20220913160101039.png) 點選 Dashboard 後，在 AWS Account 的 Account Alias 點選 Create ![image-20220913165121232](H:\\My Drive\\Blog\\IT\\content\\posts\\iThome 鐵人賽\\2022\\img\\image-20220913165121232.png) 建立完之後，可以提供以下網址給團隊成員登入 https://{{YOUR_ACCOUNT_ALIAS}}.signin.aws.amazon.com/console 建立 AWS IAM 帳號 拿到 root 首先應該要建立另外一個帳號，盡量避免 root 帳號濫用。 點選 Web Console 的右上角，選擇 Security credentials ![image-20220913160101039](H:\\My Drive\\Blog\\IT\\content\\posts\\iThome 鐵人賽\\2022\\img\\image-20220913160101039.png) 點選 Menu 的 Users，並按下 Add users ![image-20220913160235054](H:\\My Drive\\Blog\\IT\\content\\posts\\iThome 鐵人賽\\2022\\img\\image-20220913160235054.png) 設定 AWS 的存取種類，有分 Access Key 跟 Password 兩種。建議可以先兩個都打開 ![image-20220913161403605](H:\\My Drive\\Blog\\IT\\content\\posts\\iThome 鐵人賽\\2022\\img\\image-20220913161403605.png) 設定 Permission，我選擇 AdministratorAccess 這個受 AWS 管理的權限。 建立後，麻煩將 Access Key Id、Secret access key、Password 記下來，之後就可以不需要再使用 Root 帳號了。![image-20220913162451923](H:\\My Drive\\Blog\\IT\\content\\posts\\iThome 鐵人賽\\2022\\img\\image-20220913162451923.png) ","date":"0001-01-01","objectID":"/blog-for-it/day-02-3-%E5%BB%BA%E7%AB%8B%E4%BD%A0%E7%9A%84%E5%AD%B8%E7%BF%92-aws-%E5%B8%B3%E6%88%B6/:0:0","tags":null,"title":"","uri":"/blog-for-it/day-02-3-%E5%BB%BA%E7%AB%8B%E4%BD%A0%E7%9A%84%E5%AD%B8%E7%BF%92-aws-%E5%B8%B3%E6%88%B6/"},{"categories":null,"content":"經典應用架構 這是 AWS 常見且經典的應用架構，請參考以下架構圖 基本上就是把地端的主機拉上來，且部分替換成 AWS 的服務。 如果依傳統在自己家架機房，可能會有以下需求，AWS 都有對應的服務可以使用。 功能 AWS 服務 DNS Route 53 伺服器 / 虛擬機 EC2 資料庫 RDS 檔案儲存伺服器 S3 LDAP / Active Directory IAM 人員管理 ColudTrail 稽核 系統監控 CloudWatch 接下來會說明這個架構會使用到的 AWS 服務。 ","date":"0001-01-01","objectID":"/blog-for-it/day-03-1-%E7%B6%93%E5%85%B8%E6%87%89%E7%94%A8%E6%9E%B6%E6%A7%8B/:0:0","tags":null,"title":"","uri":"/blog-for-it/day-03-1-%E7%B6%93%E5%85%B8%E6%87%89%E7%94%A8%E6%9E%B6%E6%A7%8B/"},{"categories":null,"content":"[TOC] S3 S3，是 AWS 提供的檔案儲存服務，其全名為 Simple Storage Service。 其應用不是只有單純的提供你讓你的應用程式或是網頁存檔案的需求。 可以把您的靜態網站放在 S3 。 也可以將 AWS 現有雲端原生應用程式與 S3 做整合。建立更有彈性且可靠的服務。 執行大數據分析、AI、ML、HPC 所需要的資料湖泊也會需要 S3 的協助。 備份、災難 (DR) 復原也需要他的存在。 同時也可以將儲存類別設為 S3 Glacier ，幫助你封存可能長期不會使用的檔案。 Bucket \u0026 Object 裡面提到了兩個元件，如果以魚跟冰桶來比喻。 魚就是 Obejct；冰桶就是 Bucket 換句話說，你要儲存的檔案是 Object，檔案儲存的空間是 Bucket Object 依附在 Bucket 底下，且 Object 有一個 唯一 的 https 連結。 可以透過唯一 的 https 連結下載 Object，但是預設會被擋下來。需搭配權限控管才可以下載 S3 儲存類型 在儲存方案的選擇，我們需要考量兩種因素: 可用性 (Availability) 及耐久性 (Durability)。 我這邊一樣使用魚跟冰桶來比喻。 可用性 是，你將魚放到冰桶，你還能不能拿回來。 耐久性 是，你將魚從冰桶拿回來，這條魚是不是已經臭掉了。 因此可用性在於檔案能不能取回；耐久性在於檔案取回時能不能使用。 有分以下幾種儲存類型: S3 Standard 檔案經常存取的情境 儲存任務關鍵型生產資料 S3 Intelligent-Tiering 智慧分層 針對具有不斷變化、未知或不可預測存取模式的資料 適合資料湖泊、分析或新的應用程式 針對經常、不常和很少存取這三個存取方案之間移動資料，進行最佳化且提供低延遲的服務 物件的子集一段時間被封存後，可以啟用專為非同步存取而設計的封存存取方案 Glacier S3 IA S3 -Infrequent Access 儲存不常存取的資料，會另外計算擷取費用 不會有資料解凍時間 有分 Standard 跟 One Zone 兩種，差異在於可用區域的數量 Standard 可用區域 \u003e= 3 One Zone 可用區域 = 1 S3 Glacier Glacier 是冰河的意思 會有資料解凍時間 細節可參考以下篇章 S3 Outposts 這是針對 On-Premises 的資料去儲存 ","date":"0001-01-01","objectID":"/blog-for-it/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/:0:0","tags":null,"title":"","uri":"/blog-for-it/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"S3 Glacier 為封存而生的儲存類別。 最好的效能、最大彈性、最低成本 真的只能擇一嗎? 小孩子才做選擇，大人全都要! 我們可以針對不同的使用情況去挑選，可以以使用資料的頻率去判斷資料熱度，這也是蠻多公司會去做的冷熱資料分流，在 AWS S3 Glacier 就幫你做好了。 分為以下三種: Amazon S3 Glacier Instant Retrieval 針對需要立即存取的封存資料，這是一種封存儲存類別，可提供低成本的儲存和毫秒級擷取 例如醫學影像、新聞媒體資產或基因體資料 Amazon S3 Glacier Flexible Retrieval 針對不需要立即存取但需要靈活且免費擷取大型資料集的封存資料 幾分鐘內即可擷取，或在 5-12 小時內免費大量擷取 例如備份或災難復原使用案例 Amazon S3 Glacier Deep Archive 若要在長效封存存儲節省更多費用，請選擇 S3 Glacier Deep Archive，這是雲端中成本最低的儲存，資料擷取時間為 12 小時內。 例如合規封存和數位媒體保存或是幾年以上的帳單資料封存 基本上這些資料擷取時間可以想像成 食物解凍 的時間。你可以在接下來多久的時間內取得。 複寫 S3 提供兩種複寫方式，將同一份資料複製到不同地方，強化備份，讓可用性可高。 跨區域複寫 (CRR): 不同 AWS 區域間的 Bucket 物件複製。如新加坡到東京。 相同區域複寫(SRR): 相同 AWS 區域間的 Bucket 物件複製。如新加坡有 3 個可用區域，就可以複製 3 份。 檔案加密 加密種類有分為兩種加密方法: Server-Side 加密 存放在 AWS KMS 中的 KMS 金鑰 受 S3 託管的加密金鑰 不需要 客戶提供的加密金鑰 Client-Side 加密 使用存放在 AWS KMS 中的 KMS 金鑰 使用存在本地應用程式的加密金鑰 ※S3 僅支援對稱加密 KMS 金鑰，而不支援非對稱 KMS 金鑰。 因為加密的對象是檔案，所以不會使用非對稱式金鑰來加密 S3 在 Client-Side 加密，在加密或解密中不會扮演任何角色。 權限控管 對外有三種管理機制: Access Control List (ACL) Bucket Policy Block Public Access 對內有一種防線: IAM Policy ​ ","date":"0001-01-01","objectID":"/blog-for-it/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/:1:0","tags":null,"title":"","uri":"/blog-for-it/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"IAM Policy 對內的意思為在 AWS 的使用者。能透過 IAM 的 Policy 限制該 User 的權限。 ","date":"0001-01-01","objectID":"/blog-for-it/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/:2:0","tags":null,"title":"","uri":"/blog-for-it/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"ACL 存取控制清單 (Access Control List), Bucket 和 Object 都有各自的 ACL，但是對外以 Bucket 設定的 ACL 為主。 graph LR User --\u003e |ACL| Bucket Bucket --\u003e |ACL| Object S3 提供幾種預先定義的群組: 已驗證的使用者 通過 AWS 身分驗證的 AWS 帳號 所有使用者 允許世界上任何人存取資源。包含通過身分驗證跟匿名使用者。 可以授予 (Grant) 以下許可 (Permission): READ WRITE READ_ACP WRITE_ACP FULL_CONTROL 後面有加 _ACP 的是讀且或寫入 ACL 所以最常見是設定授予 (Grant) 所有使用者 擁有 READ 這個許可(Permission)。 ","date":"0001-01-01","objectID":"/blog-for-it/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/:3:0","tags":null,"title":"","uri":"/blog-for-it/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"Bucket Policy 可以設定更細緻的限制。例如特定 IP，特定的 Http Header 封包。 graph LR User --\u003e |ACL| Bucket User --\u003e |Bucket Policy| Bucket Bucket --\u003e |ACL| Object ","date":"0001-01-01","objectID":"/blog-for-it/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/:4:0","tags":null,"title":"","uri":"/blog-for-it/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"Block Public Access 限制檔案不可直接公開。避免設定調整疏失導致 Bucket 跟 Object 直接對外 graph LR User --\u003e B(Block Public Access) B --\u003e |ACL| Bucket B --\u003e |Bucket Policy| Bucket Bucket --\u003e |ACL| Object 備份及還原 災難復原 (DR) 講求的 RTO 和 RPO ","date":"0001-01-01","objectID":"/blog-for-it/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/:5:0","tags":null,"title":"","uri":"/blog-for-it/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"檔案刪除 怎麼避免檔案誤刪，或是異動成錯誤資料，有分為以下幾種: Version 透過版本控制，檔案可以更新，也可以還原成舊版。 MFA Delete 需要透過手機等多因子驗證，才可將檔案刪除。 Object Lock 透過物件鎖可以把刪除功能鎖住。 參考資料 Day 03 - 任你存S3 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 (ithome.com.tw) ","date":"0001-01-01","objectID":"/blog-for-it/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/:6:0","tags":null,"title":"","uri":"/blog-for-it/day-03-2-s3-%E6%AA%94%E6%A1%88%E5%84%B2%E5%AD%98%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"[TOC] IAM AWS 的 Root 帳號類似於 Linux ，權限非常大。因此在前面建立 AWS 帳號的時候，我特別先另外建一個 IAM User。 Identity and Access Management，是 AWS 做身分驗證和授權的基礎設施。 提供以下: 建立使用者 (實際的使用者或是供應用程式使用) 會放在 S3 後面是我們需要有一個 AWS 的服務可以做範例的。 ","date":"0001-01-01","objectID":"/blog-for-it/day-04-1-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/:0:0","tags":null,"title":"","uri":"/blog-for-it/day-04-1-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/"},{"categories":null,"content":"最小權限原則 Least Privilege ，AWS 推行的一個看法。 基本上就是使用者只會用到 EC2，就不要給他 S3 等不相干的權限。 如果公司許多角色都會使用 AWS ，且定義明確，可以使用這個原則。 運作方式 這邊可以參考 AWS 官方的架構圖 許可 (Policy) Policy 設定為 JSON 格式，主要有五種屬性可以設定。 E: Effect, 影響 P: Principal, 主體 C: Condition, 條件 A: Action, 動作 R: Resource, 資源 可以用 EPACR 來記憶，而最常見的案例是 EAR AWS 有提供一些已經寫好的 Policy，我們舉兩種角色在實務情境下他們各自設定的 Policy JSON 定義: AdministratorAccess, DatabaseAdministrator AdministratorAccess { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"*\", \"Resource\": \"*\" } ] } DatabaseAdministrator { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"cloudwatch:DeleteAlarms\", \"cloudwatch:Describe*\", \"cloudwatch:DisableAlarmActions\", \"cloudwatch:EnableAlarmActions\", \"cloudwatch:Get*\", \"cloudwatch:List*\", \"cloudwatch:PutMetricAlarm\", \"datapipeline:ActivatePipeline\", \"datapipeline:CreatePipeline\", \"datapipeline:DeletePipeline\", \"datapipeline:DescribeObjects\", \"datapipeline:DescribePipelines\", \"datapipeline:GetPipelineDefinition\", \"datapipeline:ListPipelines\", \"datapipeline:PutPipelineDefinition\", \"datapipeline:QueryObjects\", \"dynamodb:*\", \"ec2:DescribeAccountAttributes\", \"ec2:DescribeAddresses\", \"ec2:DescribeAvailabilityZones\", \"ec2:DescribeInternetGateways\", \"ec2:DescribeSecurityGroups\", \"ec2:DescribeSubnets\", \"ec2:DescribeVpcs\", \"elasticache:*\", \"iam:ListRoles\", \"iam:GetRole\", \"kms:ListKeys\", \"lambda:CreateEventSourceMapping\", \"lambda:CreateFunction\", \"lambda:DeleteEventSourceMapping\", \"lambda:DeleteFunction\", \"lambda:GetFunctionConfiguration\", \"lambda:ListEventSourceMappings\", \"lambda:ListFunctions\", \"logs:DescribeLogGroups\", \"logs:DescribeLogStreams\", \"logs:FilterLogEvents\", \"logs:GetLogEvents\", \"logs:Create*\", \"logs:PutLogEvents\", \"logs:PutMetricFilter\", \"rds:*\", \"redshift:*\", \"s3:CreateBucket\", \"sns:CreateTopic\", \"sns:DeleteTopic\", \"sns:Get*\", \"sns:List*\", \"sns:SetTopicAttributes\", \"sns:Subscribe\", \"sns:Unsubscribe\" ], \"Resource\": \"*\" }, { \"Effect\": \"Allow\", \"Action\": [ \"s3:AbortMultipartUpload\", \"s3:DeleteObject*\", \"s3:Get*\", \"s3:List*\", \"s3:PutAccelerateConfiguration\", \"s3:PutBucketTagging\", \"s3:PutBucketVersioning\", \"s3:PutBucketWebsite\", \"s3:PutLifecycleConfiguration\", \"s3:PutReplicationConfiguration\", \"s3:PutObject*\", \"s3:Replicate*\", \"s3:RestoreObject\" ], \"Resource\": [ \"*\" ] }, { \"Effect\": \"Allow\", \"Action\": [ \"iam:PassRole\" ], \"Resource\": [ \"arn:aws:iam::*:role/rds-monitoring-role\", \"arn:aws:iam::*:role/rdbms-lambda-access\", \"arn:aws:iam::*:role/lambda_exec_role\", \"arn:aws:iam::*:role/lambda-dynamodb-*\", \"arn:aws:iam::*:role/lambda-vpc-execution-role\", \"arn:aws:iam::*:role/DataPipelineDefaultRole\", \"arn:aws:iam::*:role/DataPipelineDefaultResourceRole\" ] } ] } 也有以下不同類型: 受 AWS 控管 其中常見職業角色賦予的權限，職務職能 ( Job Function) ","date":"0001-01-01","objectID":"/blog-for-it/day-04-1-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/:1:0","tags":null,"title":"","uri":"/blog-for-it/day-04-1-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/"},{"categories":null,"content":"編寫 Policy 的步驟 graph LR A[Visual Editor] --\u003e |編寫| B[Policy] B --\u003e |測試| C[Policy Simulator] C --\u003e |確認| B B --\u003e |附加| E[Group Role] 在 AWS Web Console 建立 Policy 的時候，就可以透過 Visual Editor 來建立。 不確定 Policy 建立之後的結果，可以使用 Policy Simulator 來測試。 最終確認完的結果，附加到 Group Role。 角色 (Role) AWS 服務之間要互相溝通，中間需要透過 Role User Groups vs Role? 驗證機制 架構設計 graph LR Policy --\u003e Permission Permission --\u003e IAM_Group[IAM Group] Permission --\u003e Role IAM_Group --\u003e User User --\u003e Password User --\u003e Credential Role --\u003e AWS_Resoure[AWS Resoure] Role --\u003e Other[Other Account User] What’s Permissions? 在設定 IAM 帳號的時候有出現， 這邊有一些受 AWS 控管的 Policy 已經建立好可以使用。 ACL 也算在 IAM 的管理裡面 結論 IAM 是 AWS 在資安管控上最基本的必修課。清楚了解它的功能對於日後在設計網站的時候也能提供不少權限控制的想法。 而且 AWS 也提供很大的彈性 參考資料 了解 IAM 的運作方式 AWS 角色功能 https://docs.aws.amazon.com/IAM/latest/UserGuide/intro-structure.html ","date":"0001-01-01","objectID":"/blog-for-it/day-04-1-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/:2:0","tags":null,"title":"","uri":"/blog-for-it/day-04-1-iam-%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%E5%A4%A7%E5%B8%AB/"},{"categories":null,"content":"怎麼選擇? Amazon Machine Image 虛擬映像檔 Userdata 硬碟 EBS I Snapshot 防火牆 登入 ","date":"0001-01-01","objectID":"/blog-for-it/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/:0:0","tags":null,"title":"","uri":"/blog-for-it/day-05-1-ec2-%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F/"},{"categories":null,"content":"EC2 可以 ECS 不確定 ","date":"0001-01-01","objectID":"/blog-for-it/day-10-auto-scaling-%E8%87%AA%E5%8B%95%E5%A2%9E%E6%B8%9B%E6%A9%9F%E5%99%A8/:0:0","tags":null,"title":"","uri":"/blog-for-it/day-10-auto-scaling-%E8%87%AA%E5%8B%95%E5%A2%9E%E6%B8%9B%E6%A9%9F%E5%99%A8/"},{"categories":null,"content":"太重要了，所以拉一篇文件來說明 AWS Key Management Service 客戶主金鑰(CMK) 是在 AWS KMS 中建立的金鑰 ","date":"0001-01-01","objectID":"/blog-for-it/day-23-kms-%E9%87%91%E9%91%B0%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8B%99/:0:0","tags":null,"title":"","uri":"/blog-for-it/day-23-kms-%E9%87%91%E9%91%B0%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8B%99/"},{"categories":null,"content":"[TOC] 提供每個月 5 萬個 MAU 何謂 MAU? ","date":"0001-01-01","objectID":"/blog-for-it/day-28-cognito-sso-%E7%99%BB%E5%85%A5/:0:0","tags":null,"title":"","uri":"/blog-for-it/day-28-cognito-sso-%E7%99%BB%E5%85%A5/"},{"categories":null,"content":"有些在意的 Hands-on S3 的加解密實作 書籍有些跟GCP 的差別 LRU 快取 考試的準備心得 首先我先看書把一些服務先了解功能。 之後搭配架構實際 Hands-on 到可以使用的階段。 實際工作上會遇到的情況，比較像是你遇到什麼問題或是需要什麼功能，你能下意識知道要去哪個服務設定，或是增加哪些服務來幫你達成你要的需求。 因此比較重要的服務一定要實際 Hands-on 一遍，你遲早都得操作，為什麼不現在就操作呢? 其他冷門服務不見得要 Hands-on ，但是遇到了你要知道有什麼東西可以幫助你 考前準備 模擬考題呀! 公司雖然有模擬考的資源，但是我自己另外推薦這個網站 Examtopics ，他囊括各種考試，而且也會有許多人上來討論，提供正確解答。 考題對應解決方案我也會在筆記上記錄下來。未來遇到類似問題也不會因為這次考試就忘記。 裡面有談到的 AWS 服務: AWS serverless application Model (AWS SAM) template AWS Control Tower service control policies (SCPs) AWS Cognito AWS GuardDuty AWS Macie AWS Shield AWS WAF AWS SSO AWS Secrets Manager AWS Direct Connect AWS Fargate AWS Lambda AWS Transfer Family Amazon Simple Queue Service AWS Elastic Container Service AWS Elastic Kubernetes Service AWS Regions AWS Route 53 AWS Comprehend AWS Polly AWS RDS Proxy AWS X-Ray AWS caching services Amazon ElastiCache Amazon API Gateway cache CloudWatch 架構應該考慮: 安全 Secure 有彈性 Resilient 可擴展 scalable 高效能 High-Performing 成本最優化 Cost-Optimized 鬆耦合 loosely coupled 架構相關 Event-driven architectures Message Driven ?? Multi-tier architectures Microservice 維運相關 災難復原 Disaster recovery ( DR ) 策略 backup and restore pilot light warm standby active-active failover recovery point objective [RPO] recovery time objective [RTO] 故障轉移 Failover ","date":"0001-01-01","objectID":"/blog-for-it/day-30-%E6%BA%96%E5%82%99%E5%BF%83%E5%BE%97-%E8%80%83%E5%89%8D%E6%BA%96%E5%82%99/:0:0","tags":null,"title":"","uri":"/blog-for-it/day-30-%E6%BA%96%E5%82%99%E5%BF%83%E5%BE%97-%E8%80%83%E5%89%8D%E6%BA%96%E5%82%99/"},{"categories":null,"content":"[TOC] 賽後心得 坦白說 30 天內能準備的東西有限，可能我一天就會有好幾篇內容， 最大的心得是自己對於架構方面有更進一步的認識，甚至知道很多名詞跟現在解決某些方案的 Solution 而且在學習過程中，有太多服務有新功能新設定。 學習、常用雲服務永遠都有最新的技術跟架構可以體驗。 ","date":"0001-01-01","objectID":"/blog-for-it/day-31-%E8%80%83%E5%BE%8C%E6%84%9F%E6%83%B3-%E8%B3%BD%E5%BE%8C%E5%BF%83%E5%BE%97/:0:0","tags":null,"title":"","uri":"/blog-for-it/day-31-%E8%80%83%E5%BE%8C%E6%84%9F%E6%83%B3-%E8%B3%BD%E5%BE%8C%E5%BF%83%E5%BE%97/"},{"categories":null,"content":"學習多個雲，真的有需要嗎? 實際情況是，有些公司強調服務的高可用性時，不會允許某一朵雲的服務發生狀況 會傾向把服務導向另外一朵還存活的雲，避免公司 ","date":"0001-01-01","objectID":"/blog-for-it/day-31-%E8%80%83%E5%BE%8C%E6%84%9F%E6%83%B3-%E8%B3%BD%E5%BE%8C%E5%BF%83%E5%BE%97/:1:0","tags":null,"title":"","uri":"/blog-for-it/day-31-%E8%80%83%E5%BE%8C%E6%84%9F%E6%83%B3-%E8%B3%BD%E5%BE%8C%E5%BF%83%E5%BE%97/"},{"categories":null,"content":"演算法圖鑑提到了七種資料結構，如下: list 列表 array 陣列 stack 堆疊 queue 柱列 hash table 雜湊表 heap 堆積 binary search tree 二元搜尋樹 GeeksforGeeks 網站則定義了有以下: Array Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Matrix Misc Advanced Data Structure 參考資料 演算法圖鑑 geeksforgeeks data structure ","date":"0001-01-01","objectID":"/blog-for-it/01.%E5%B0%8E%E8%AB%96/:0:0","tags":null,"title":"","uri":"/blog-for-it/01.%E5%B0%8E%E8%AB%96/"}]